/* The following code was generated by JFlex 1.3.5 on 18/06/18 20:49 */

package MedievalTextLexer;


import java.io.*;

import java.util.*;
import ContextProcessing.*;
import IOModule.*;
import DataStructures.*;


import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.ScriptContext;
import javax.script.SimpleScriptContext;
import Recognition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 18/06/18 20:49 from the specification file
 * <tt>file:/Users/mluisadiez/Documents/PELAGIOS/mama/mama/prueba/src/MedievalTextLexer/lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int RUB = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\13\2\0\1\12\22\0\1\71\1\0\1\61\1\65"+
    "\1\0\1\51\1\26\1\4\1\47\1\50\1\0\1\66\1\3\1\6"+
    "\1\27\1\63\2\2\1\64\7\2\1\54\1\67\1\55\1\60\1\62"+
    "\1\14\1\0\1\7\1\42\1\41\1\23\1\32\3\7\1\45\1\7"+
    "\1\52\1\30\1\53\1\46\3\7\1\43\2\7\1\44\5\7\1\37"+
    "\1\0\1\15\1\40\2\0\1\31\1\57\1\73\1\21\1\22\1\16"+
    "\1\72\1\1\1\74\2\1\1\20\1\1\1\34\1\17\1\56\1\1"+
    "\1\70\1\33\1\24\4\1\1\25\1\1\1\35\1\0\1\36\1\11"+
    "\110\0\1\10\31\0\1\11\5\0\1\11\1\0\1\11\3\0\1\11"+
    "\3\0\1\11\1\0\1\11\6\0\1\11\u1f1e\0\1\11\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    61,   122,   183,   244,   122,   305,   366,   427,   488, 
      122,   549,   610,   122,   671,   732,   793,   854,   122,   915, 
      976,  1037,   122,  1098,  1159,  1220,  1281,  1342,  1403,   488, 
     1464,  1525,   122,   122,  1586,  1647,  1708,  1769,  1830,  1891, 
     1952,  2013,  2074,   488,  2135,  2196,  2257,  2318,  2379,  2440, 
     2501,  2562,  2623,  2684,  2745,  2806,  2867,  2928,  2989,  3050, 
     3111,  3172,  3233,  3294,  3355,  3416,  3477,  3538,  3599,  3660, 
     3721,  3782,  3843,  3904,  1525,  3965,  4026,  4087,  4148,  4209, 
     4270,  4331,  4392,  4453,  4514,  4575,  4636,  4697,  4758,  4819, 
     4880,  4941,  5002,  5063,  5124,  5185,  5246,  5307,  3050,  5368, 
      122,  3294,  5429,  3355,  5490,  5551,  5612,  5673,  5734,  5795, 
     5856,  5917,  5978,  6039,  6100,  6161,  6222,  6283,  6344,  6405, 
     6466,  6527,  6588,  6649,  6710,  6771,  6832,  6893,  6954,  7015, 
     7076,  7137,  7198,  7259,  7320,  7381,  7442,  7503,  7564,  7625, 
     7686,  7747,  7808,  7869,  7930,  7991,  8052,  8113,  8174,  8235, 
     8296,  8357,  8418,  8479,  8540,  8601,  8662,  8723,  8784,  8845, 
     8906,  8967,  9028,  9089,  9150,  9211,  9272,  9333,  9394,  9455, 
     9516,  9577,  9638,  9699,  9760,  9821,  9882,  9943, 10004, 10065, 
    10126, 10187, 10248, 10309, 10370, 10431, 10492, 10553, 10614, 10675, 
    10736, 10797, 10858, 10919, 10980, 11041, 11102, 11163, 11224, 11285, 
    11346, 11407, 11468, 11529, 11590, 11651, 11712, 11773, 11834, 11895, 
    11956, 12017, 12078, 12139, 12200, 12261, 12322, 12383, 12444, 12505, 
    12566, 12627, 12688, 12749, 12810, 12871, 12932, 10675, 12993, 13054, 
    13115, 13176, 13237, 13298, 13359, 13420, 13481, 13542, 13603, 13664, 
    13725, 13786, 13847, 13908, 13969, 14030, 14091, 14152, 14213, 14274, 
    14335, 14396, 14457, 14518, 14579, 14640, 14701, 14762, 14823, 14884, 
    14945, 15006, 15067,   122, 15128, 15189, 15250, 15311, 15372, 15433, 
    15494, 15555, 15616, 15677, 15738, 15799, 15860, 15921, 15982, 16043, 
    16104, 16165, 16226, 16287, 16348, 16409, 16470, 16531, 16592, 16653, 
    16714, 16775, 16836, 16897, 16958, 17019, 17080, 17141, 17202, 17263, 
    17324, 17385, 17446, 17507, 17568, 17629, 17690, 17751, 17812, 17873, 
    17934, 17995, 18056, 18117, 18178, 18239, 18300, 18361, 18422, 18483, 
    18544, 18605, 18666, 18727, 18788, 18849, 18910, 18971, 19032, 19093, 
    19154, 19215, 19276, 19337, 19398, 19459, 19520, 19581, 19642, 19703, 
    19764, 19825, 19886, 19947, 20008, 20069, 20130, 20191, 20252, 20313, 
    20374, 20435, 20496, 20557, 20496, 20618, 20679, 20740, 20801, 20862, 
    20923, 20984, 21045, 21106, 21167, 21228, 21289, 21350, 21411, 21472, 
    21533, 21594, 21655, 21716, 21777, 21838, 21899, 21960, 22021, 22082, 
    22143, 22204, 22265, 22326, 22387, 22448, 22509, 22570, 22631, 22692, 
    22753, 22814, 22875, 22936, 22997, 23058, 23119, 23180, 23241, 23302, 
    23363, 23424, 23485, 23546, 23607, 23668, 23729, 23790, 23851, 23912, 
    23973, 24034, 24095, 24156, 24217, 24278, 24339, 24400, 24461, 24522, 
    24583, 24644, 24705, 24766, 24827, 24888, 24949, 25010, 25071, 25132, 
    25193, 25254, 25315, 25376, 25437, 25498, 25559, 25620, 25681, 25742, 
    25803, 25864, 25925, 25986, 26047, 26108, 26169, 26230, 26291, 26352, 
    26413, 26474, 26535, 26596, 26657, 26718, 26779, 26840, 26901, 26962, 
    27023, 27084, 27145, 27206, 27267, 26901, 27328, 27389, 27450, 27511, 
      122
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\10\2\11"+
    "\1\4\2\12\2\13\3\4\1\14\1\4\1\15\2\4"+
    "\1\16\1\17\1\20\1\4\1\21\2\4\1\22\1\23"+
    "\1\24\1\25\6\11\1\26\1\13\1\3\2\11\1\27"+
    "\1\30\1\31\1\4\3\3\1\32\1\5\2\13\1\6"+
    "\1\4\1\7\3\4\1\0\1\33\1\5\1\6\1\33"+
    "\1\34\1\35\2\11\1\33\2\36\2\0\3\33\1\37"+
    "\1\33\1\15\2\33\1\0\1\40\1\20\1\33\1\21"+
    "\2\33\1\0\1\41\2\0\6\11\3\0\2\11\1\42"+
    "\1\0\1\43\1\33\3\0\1\6\1\5\1\0\1\13"+
    "\1\6\1\33\1\34\3\33\76\0\1\4\2\0\1\4"+
    "\1\0\1\44\2\0\1\4\2\0\2\45\5\4\1\0"+
    "\2\4\3\0\1\4\1\0\2\4\2\0\2\45\6\0"+
    "\2\45\4\0\1\45\2\4\2\0\1\45\5\0\1\4"+
    "\1\0\3\4\2\0\1\5\61\0\1\5\15\0\1\7"+
    "\63\0\1\7\4\0\1\46\2\0\1\46\1\0\1\47"+
    "\2\50\1\46\2\0\2\51\5\46\1\50\2\46\2\0"+
    "\1\50\1\46\1\50\2\46\2\0\2\51\6\50\2\51"+
    "\1\0\2\50\1\0\1\51\2\46\2\0\1\51\5\0"+
    "\1\46\1\0\3\46\1\0\1\52\2\0\1\52\1\0"+
    "\1\53\2\50\1\52\2\0\2\51\5\52\1\50\2\52"+
    "\2\0\1\50\1\52\1\50\2\52\2\0\2\51\6\50"+
    "\2\51\1\0\2\50\1\0\1\51\2\52\2\0\1\51"+
    "\5\0\1\52\1\0\3\52\12\0\2\54\62\0\1\4"+
    "\2\0\1\4\1\0\1\44\2\0\1\4\2\0\2\45"+
    "\1\4\1\55\2\4\1\56\1\0\2\4\3\0\1\4"+
    "\1\0\2\4\2\0\2\45\6\0\2\45\4\0\1\45"+
    "\2\4\2\0\1\45\5\0\1\4\1\0\3\4\1\0"+
    "\1\52\2\0\1\52\1\0\1\53\2\50\1\52\2\0"+
    "\2\51\1\52\1\57\2\52\1\60\1\50\2\52\2\0"+
    "\1\50\1\52\1\50\2\52\2\0\2\51\6\50\2\51"+
    "\1\0\2\50\1\0\1\51\2\52\2\0\1\51\5\0"+
    "\1\52\1\0\3\52\1\0\2\61\2\0\1\62\1\0"+
    "\1\61\2\0\2\62\2\0\10\61\2\0\5\61\4\0"+
    "\6\61\3\0\2\61\2\0\2\61\4\0\1\61\3\0"+
    "\1\61\1\62\3\61\1\0\1\52\2\0\1\52\1\0"+
    "\1\53\2\50\1\52\2\0\2\51\1\52\1\63\3\52"+
    "\1\50\2\52\2\0\1\50\1\64\1\50\2\52\2\0"+
    "\2\51\6\50\2\51\1\0\2\50\1\0\1\51\2\52"+
    "\2\0\1\51\5\0\1\52\1\0\3\52\1\0\1\52"+
    "\2\0\1\52\1\0\1\53\2\50\1\52\2\0\2\51"+
    "\2\52\1\65\2\52\1\50\2\52\2\0\1\50\1\52"+
    "\1\50\2\52\2\0\2\51\6\50\2\51\1\0\2\50"+
    "\1\0\1\51\2\52\2\0\1\51\5\0\1\52\1\0"+
    "\3\52\41\0\1\66\1\67\1\70\1\0\1\71\34\0"+
    "\1\72\10\0\1\73\21\0\1\74\10\0\1\75\17\0"+
    "\1\72\5\0\1\76\61\0\1\76\15\0\1\77\63\0"+
    "\1\77\3\0\3\100\1\0\1\101\1\0\5\100\1\0"+
    "\1\100\1\0\10\100\2\0\7\100\1\0\14\100\1\0"+
    "\1\100\1\102\4\100\1\103\5\100\1\0\3\100\1\0"+
    "\1\4\2\0\1\4\1\0\1\44\2\0\1\4\2\0"+
    "\2\45\1\4\1\104\3\4\1\0\2\4\3\0\1\4"+
    "\1\0\2\4\2\0\2\45\6\0\2\45\4\0\1\45"+
    "\2\4\2\0\1\45\5\0\1\4\1\0\3\4\64\0"+
    "\1\105\11\0\1\33\2\0\1\33\1\0\1\106\2\0"+
    "\1\33\2\0\2\45\5\33\1\0\2\33\3\0\1\33"+
    "\1\0\2\33\2\0\2\45\6\0\2\45\4\0\1\45"+
    "\2\33\2\0\1\45\5\0\1\33\1\0\3\33\5\0"+
    "\1\34\63\0\1\34\4\0\1\107\2\0\1\107\1\0"+
    "\1\110\2\50\1\107\2\0\2\51\5\107\1\50\2\107"+
    "\2\0\1\50\1\107\1\50\2\107\2\0\2\51\6\50"+
    "\2\51\1\0\2\50\1\0\1\51\2\107\2\0\1\51"+
    "\5\0\1\107\1\0\3\107\1\0\1\33\2\0\1\33"+
    "\1\0\1\106\2\0\1\33\2\0\2\45\1\33\1\111"+
    "\2\33\1\112\1\0\2\33\3\0\1\33\1\0\2\33"+
    "\2\0\2\45\6\0\2\45\4\0\1\45\2\33\2\0"+
    "\1\45\5\0\1\33\1\0\3\33\5\0\1\113\4\0"+
    "\2\113\55\0\1\113\4\0\1\33\2\0\1\33\1\0"+
    "\1\106\2\0\1\33\2\0\2\45\1\33\1\114\3\33"+
    "\1\0\2\33\3\0\1\33\1\0\2\33\2\0\2\45"+
    "\6\0\2\45\4\0\1\45\2\33\2\0\1\45\5\0"+
    "\1\33\1\0\3\33\1\0\1\4\2\0\1\4\1\0"+
    "\1\44\2\0\1\4\1\0\1\115\2\45\5\4\1\0"+
    "\2\4\3\0\1\4\1\0\2\4\2\0\2\45\6\0"+
    "\2\45\4\0\1\45\2\4\2\0\1\45\5\0\1\4"+
    "\1\0\3\4\1\0\1\45\2\0\1\45\1\0\1\45"+
    "\2\0\1\45\2\0\7\45\1\0\2\45\3\0\1\45"+
    "\1\0\2\45\2\0\2\45\6\0\2\45\4\0\3\45"+
    "\2\0\1\45\5\0\1\45\1\0\3\45\1\0\1\46"+
    "\2\0\1\46\1\116\1\117\2\0\1\46\2\0\2\51"+
    "\5\46\1\0\2\46\3\0\1\46\1\0\2\46\2\0"+
    "\2\51\6\0\2\51\4\0\1\51\2\46\2\0\1\51"+
    "\5\0\1\46\1\116\3\46\1\0\1\46\2\0\1\46"+
    "\1\116\1\47\2\50\1\46\1\0\1\120\2\51\5\46"+
    "\1\50\2\46\2\0\1\50\1\46\1\50\2\46\2\0"+
    "\2\51\6\50\2\51\1\0\2\50\1\0\1\51\2\46"+
    "\2\0\1\51\5\0\1\46\1\116\3\46\1\0\1\121"+
    "\2\0\1\121\1\0\1\122\2\50\1\121\2\0\2\51"+
    "\5\121\1\50\2\121\2\0\1\50\1\121\1\50\2\121"+
    "\2\0\2\51\6\50\2\51\1\0\2\50\1\0\1\51"+
    "\2\121\2\0\1\51\5\0\1\121\1\0\3\121\1\0"+
    "\1\51\2\0\1\51\1\0\1\51\2\0\1\51\2\0"+
    "\7\51\1\0\2\51\3\0\1\51\1\0\2\51\2\0"+
    "\2\51\6\0\2\51\4\0\3\51\2\0\1\51\5\0"+
    "\1\51\1\0\3\51\1\0\1\52\2\0\1\52\1\116"+
    "\1\123\2\0\1\52\2\0\2\51\5\52\1\0\2\52"+
    "\3\0\1\52\1\0\2\52\2\0\2\51\6\0\2\51"+
    "\4\0\1\51\2\52\2\0\1\51\5\0\1\52\1\116"+
    "\3\52\1\0\1\52\2\0\1\52\1\116\1\53\2\50"+
    "\1\52\1\0\1\120\2\51\5\52\1\50\2\52\2\0"+
    "\1\50\1\52\1\50\2\52\2\0\2\51\6\50\2\51"+
    "\1\0\2\50\1\0\1\51\2\52\2\0\1\51\5\0"+
    "\1\52\1\116\3\52\1\0\1\4\2\0\1\4\1\0"+
    "\1\44\2\0\1\4\2\0\2\45\5\4\1\0\2\4"+
    "\3\0\1\4\1\0\1\4\1\124\2\0\2\45\6\0"+
    "\2\45\4\0\1\45\2\4\2\0\1\45\5\0\1\4"+
    "\1\0\3\4\1\0\1\4\2\0\1\4\1\125\1\44"+
    "\2\0\1\4\2\0\2\45\2\4\1\126\2\4\1\0"+
    "\2\4\3\0\1\4\1\0\2\4\2\0\2\45\6\0"+
    "\2\45\4\0\1\45\2\4\2\0\1\45\5\0\1\4"+
    "\1\125\3\4\1\0\1\52\2\0\1\52\1\116\1\123"+
    "\2\0\1\52\2\0\2\51\5\52\1\0\2\52\3\0"+
    "\1\52\1\0\1\52\1\127\2\0\2\51\6\0\2\51"+
    "\4\0\1\51\2\52\2\0\1\51\5\0\1\52\1\116"+
    "\3\52\1\0\1\52\2\0\1\52\1\130\1\123\2\0"+
    "\1\52\2\0\2\51\2\52\1\131\2\52\1\0\2\52"+
    "\3\0\1\52\1\0\2\52\2\0\2\51\6\0\2\51"+
    "\4\0\1\51\2\52\2\0\1\51\5\0\1\52\1\130"+
    "\3\52\1\0\2\61\4\0\1\61\6\0\10\61\1\0"+
    "\1\132\5\61\4\0\6\61\3\0\2\61\2\0\2\61"+
    "\4\0\1\61\3\0\1\61\1\0\3\61\5\0\1\62"+
    "\4\0\2\62\55\0\1\62\4\0\1\52\2\0\1\52"+
    "\1\116\1\123\2\0\1\52\2\0\2\51\5\52\1\0"+
    "\2\52\3\0\1\52\1\0\1\65\1\52\2\0\2\51"+
    "\6\0\2\51\4\0\1\51\2\52\2\0\1\51\5\0"+
    "\1\52\1\116\3\52\1\0\1\52\2\0\1\52\1\133"+
    "\1\123\2\0\1\52\2\134\2\51\5\52\1\0\2\52"+
    "\3\0\1\52\1\0\1\65\1\52\2\0\2\51\6\0"+
    "\2\51\4\0\1\51\2\52\2\0\1\51\5\0\1\52"+
    "\1\133\3\52\1\0\1\52\2\0\1\52\1\133\1\123"+
    "\2\0\1\52\2\134\2\51\5\52\1\0\2\52\3\0"+
    "\1\52\1\0\2\52\2\0\2\51\6\0\2\51\4\0"+
    "\1\51\2\52\2\0\1\51\5\0\1\52\1\133\3\52"+
    "\42\0\1\135\62\0\1\136\110\0\1\137\6\0\1\140"+
    "\67\0\1\141\33\0\1\72\7\0\1\13\53\0\1\72"+
    "\22\0\1\142\57\0\1\143\61\0\1\143\12\0\1\144"+
    "\12\0\1\145\46\0\1\144\12\0\1\76\61\0\1\76"+
    "\1\13\14\0\1\77\42\0\1\13\20\0\1\77\3\0"+
    "\3\100\1\0\1\101\1\0\5\100\1\0\1\100\1\0"+
    "\10\100\2\0\7\100\1\0\14\100\1\0\5\100\1\146"+
    "\1\0\5\100\1\0\3\100\3\101\1\147\1\101\1\147"+
    "\5\101\1\147\1\101\1\147\10\101\2\147\7\101\1\147"+
    "\14\101\1\147\5\101\1\150\1\147\5\101\1\147\3\101"+
    "\3\100\1\0\1\101\1\0\5\100\1\0\1\100\1\0"+
    "\10\100\2\0\7\100\1\0\14\100\1\0\2\100\1\151"+
    "\2\100\1\146\1\0\5\100\1\0\6\100\1\0\1\101"+
    "\1\0\5\100\1\0\1\100\1\0\10\100\2\0\7\100"+
    "\1\0\14\100\1\0\6\100\1\0\5\100\1\0\3\100"+
    "\1\0\1\4\2\0\1\4\1\0\1\44\2\0\1\4"+
    "\2\0\2\45\5\4\1\0\2\4\3\0\1\4\1\0"+
    "\2\4\2\0\2\45\6\0\2\45\4\0\1\45\2\4"+
    "\2\0\1\45\5\0\1\152\1\0\3\4\63\0\1\13"+
    "\12\0\1\33\2\0\1\33\1\0\1\106\2\0\1\33"+
    "\1\0\1\115\2\45\5\33\1\0\2\33\3\0\1\33"+
    "\1\0\2\33\2\0\2\45\6\0\2\45\4\0\1\45"+
    "\2\33\2\0\1\45\5\0\1\33\1\0\3\33\1\0"+
    "\1\107\2\0\1\107\1\116\1\153\2\0\1\107\2\0"+
    "\2\51\5\107\1\0\2\107\3\0\1\107\1\0\2\107"+
    "\2\0\2\51\6\0\2\51\4\0\1\51\2\107\2\0"+
    "\1\51\5\0\1\107\1\116\3\107\1\0\1\107\2\0"+
    "\1\107\1\116\1\110\2\50\1\107\1\0\1\120\2\51"+
    "\5\107\1\50\2\107\2\0\1\50\1\107\1\50\2\107"+
    "\2\0\2\51\6\50\2\51\1\0\2\50\1\0\1\51"+
    "\2\107\2\0\1\51\5\0\1\107\1\116\3\107\1\0"+
    "\1\33\2\0\1\33\1\0\1\106\2\0\1\33\2\0"+
    "\2\45\5\33\1\0\2\33\3\0\1\33\1\0\1\33"+
    "\1\154\2\0\2\45\6\0\2\45\4\0\1\45\2\33"+
    "\2\0\1\45\5\0\1\33\1\0\3\33\1\0\1\33"+
    "\2\0\1\33\1\125\1\106\2\0\1\33\2\0\2\45"+
    "\2\33\1\155\2\33\1\0\2\33\3\0\1\33\1\0"+
    "\2\33\2\0\2\45\6\0\2\45\4\0\1\45\2\33"+
    "\2\0\1\45\5\0\1\33\1\125\3\33\1\0\1\33"+
    "\2\0\1\33\1\0\1\106\2\0\1\33\2\0\2\45"+
    "\5\33\1\0\2\33\3\0\1\33\1\0\2\33\2\0"+
    "\2\45\6\0\2\45\4\0\1\45\2\33\2\0\1\45"+
    "\5\0\1\156\1\0\3\33\1\0\1\115\2\0\1\115"+
    "\1\0\1\157\2\0\1\115\4\0\5\115\1\0\2\115"+
    "\3\0\1\115\1\0\2\115\21\0\2\115\10\0\1\115"+
    "\1\0\3\115\5\0\1\116\3\160\10\0\1\161\1\162"+
    "\1\163\1\0\1\164\2\0\1\165\1\0\1\166\6\0"+
    "\6\160\3\0\2\160\15\0\1\116\4\0\1\46\2\0"+
    "\1\46\1\116\1\117\2\0\1\46\1\0\1\120\2\51"+
    "\5\46\1\0\2\46\3\0\1\46\1\0\2\46\2\0"+
    "\2\51\6\0\2\51\4\0\1\51\2\46\2\0\1\51"+
    "\5\0\1\46\1\116\3\46\1\0\1\120\2\0\1\120"+
    "\1\0\1\167\2\0\1\120\4\0\5\120\1\0\2\120"+
    "\3\0\1\120\1\0\2\120\21\0\2\120\10\0\1\120"+
    "\1\0\3\120\1\0\1\121\2\0\1\121\1\0\1\170"+
    "\2\0\1\121\2\0\2\51\5\121\1\0\2\121\3\0"+
    "\1\121\1\0\2\121\2\0\2\51\6\0\2\51\4\0"+
    "\1\51\2\121\2\0\1\51\5\0\1\121\1\0\3\121"+
    "\1\0\1\121\2\0\1\121\1\0\1\122\2\50\1\121"+
    "\1\0\1\120\2\51\5\121\1\50\2\121\2\0\1\50"+
    "\1\121\1\50\2\121\2\0\2\51\6\50\2\51\1\0"+
    "\2\50\1\0\1\51\2\121\2\0\1\51\5\0\1\121"+
    "\1\0\3\121\1\0\1\52\2\0\1\52\1\116\1\123"+
    "\2\0\1\52\1\0\1\120\2\51\5\52\1\0\2\52"+
    "\3\0\1\52\1\0\2\52\2\0\2\51\6\0\2\51"+
    "\4\0\1\51\2\52\2\0\1\51\5\0\1\52\1\116"+
    "\3\52\1\0\1\4\2\0\1\4\1\171\1\44\2\0"+
    "\1\4\2\0\2\45\5\4\1\0\2\4\3\0\1\4"+
    "\1\0\1\4\1\172\2\0\2\45\6\0\2\45\4\0"+
    "\1\45\2\4\2\0\1\45\5\0\1\4\1\171\3\4"+
    "\5\0\1\125\3\173\12\0\1\173\4\0\1\174\1\0"+
    "\1\175\6\0\6\173\3\0\2\173\15\0\1\125\4\0"+
    "\1\4\2\0\1\4\1\125\1\44\2\0\1\4\2\0"+
    "\2\45\5\4\1\0\2\4\3\0\1\4\1\0\2\4"+
    "\2\0\2\45\6\0\2\45\4\0\1\45\2\4\2\0"+
    "\1\45\5\0\1\4\1\125\3\4\1\0\1\52\2\0"+
    "\1\52\1\176\1\123\2\0\1\52\2\0\2\51\5\52"+
    "\1\0\2\52\3\0\1\52\1\0\1\52\1\177\2\0"+
    "\2\51\6\0\2\51\4\0\1\51\2\52\2\0\1\51"+
    "\5\0\1\52\1\176\3\52\5\0\1\130\3\200\10\0"+
    "\1\161\1\162\1\201\1\0\1\164\2\0\1\202\1\0"+
    "\1\203\6\0\6\200\3\0\2\200\15\0\1\130\4\0"+
    "\1\52\2\0\1\52\1\130\1\123\2\0\1\52\2\0"+
    "\2\51\5\52\1\0\2\52\3\0\1\52\1\0\2\52"+
    "\2\0\2\51\6\0\2\51\4\0\1\51\2\52\2\0"+
    "\1\51\5\0\1\52\1\130\3\52\1\0\2\61\4\0"+
    "\1\61\6\0\10\61\2\0\5\61\4\0\6\61\3\0"+
    "\2\61\2\0\2\61\4\0\1\61\3\0\1\61\1\0"+
    "\3\61\5\0\1\133\3\160\1\0\2\134\5\0\1\204"+
    "\1\162\1\205\1\0\1\164\2\0\1\206\1\0\1\207"+
    "\6\0\6\160\3\0\2\160\15\0\1\133\10\0\1\134"+
    "\3\210\1\0\2\134\7\0\1\210\4\0\1\211\1\0"+
    "\1\212\6\0\6\210\3\0\2\210\15\0\1\134\5\0"+
    "\1\213\61\0\1\213\56\0\1\214\70\0\1\215\104\0"+
    "\1\216\24\0\1\217\61\0\1\217\30\0\1\220\71\0"+
    "\1\145\57\0\4\147\1\100\70\147\3\100\1\0\1\101"+
    "\1\221\5\100\1\0\1\100\1\0\10\100\2\0\7\100"+
    "\1\0\14\100\1\0\5\100\1\146\1\0\5\100\1\221"+
    "\3\100\1\0\1\4\2\0\1\4\1\0\1\44\2\0"+
    "\1\4\2\0\2\45\5\4\1\0\2\4\3\0\1\4"+
    "\1\0\2\4\2\0\2\45\6\0\2\45\4\0\1\45"+
    "\2\4\2\0\1\45\5\0\1\4\1\222\3\4\1\0"+
    "\1\107\2\0\1\107\1\116\1\153\2\0\1\107\1\0"+
    "\1\120\2\51\5\107\1\0\2\107\3\0\1\107\1\0"+
    "\2\107\2\0\2\51\6\0\2\51\4\0\1\51\2\107"+
    "\2\0\1\51\5\0\1\107\1\116\3\107\1\0\1\33"+
    "\2\0\1\33\1\171\1\106\2\0\1\33\2\0\2\45"+
    "\5\33\1\0\2\33\3\0\1\33\1\0\1\33\1\223"+
    "\2\0\2\45\6\0\2\45\4\0\1\45\2\33\2\0"+
    "\1\45\5\0\1\33\1\171\3\33\1\0\1\33\2\0"+
    "\1\33\1\125\1\106\2\0\1\33\2\0\2\45\5\33"+
    "\1\0\2\33\3\0\1\33\1\0\2\33\2\0\2\45"+
    "\6\0\2\45\4\0\1\45\2\33\2\0\1\45\5\0"+
    "\1\33\1\125\3\33\1\0\1\33\2\0\1\33\1\0"+
    "\1\106\2\0\1\33\2\0\2\45\5\33\1\0\2\33"+
    "\3\0\1\33\1\0\2\33\2\0\2\45\6\0\2\45"+
    "\4\0\1\45\2\33\2\0\1\45\5\0\1\33\1\222"+
    "\3\33\1\0\1\115\2\0\1\115\1\0\1\157\2\0"+
    "\1\115\1\0\1\115\2\0\5\115\1\0\2\115\3\0"+
    "\1\115\1\0\2\115\21\0\2\115\10\0\1\115\1\0"+
    "\3\115\1\0\1\224\2\0\1\224\1\225\1\226\2\227"+
    "\1\224\4\0\5\224\1\227\2\224\2\0\1\227\1\224"+
    "\1\227\2\224\4\0\6\227\3\0\2\227\2\0\2\224"+
    "\10\0\1\224\1\225\3\224\22\0\1\230\57\0\1\231"+
    "\16\0\1\164\44\0\1\231\4\0\1\224\2\0\1\224"+
    "\1\225\1\226\2\227\1\224\4\0\4\224\1\232\1\227"+
    "\2\224\2\0\1\227\1\224\1\227\2\224\4\0\6\227"+
    "\3\0\2\227\2\0\2\224\10\0\1\224\1\225\3\224"+
    "\5\0\1\231\63\0\1\231\4\0\1\224\2\0\1\224"+
    "\1\225\1\226\2\227\1\224\4\0\1\224\1\233\3\224"+
    "\1\227\2\224\2\0\1\227\1\234\1\227\2\224\4\0"+
    "\6\227\3\0\2\227\2\0\2\224\10\0\1\224\1\225"+
    "\3\224\1\0\1\224\2\0\1\224\1\225\1\226\2\227"+
    "\1\224\4\0\2\224\1\235\2\224\1\227\2\224\2\0"+
    "\1\227\1\224\1\227\2\224\4\0\6\227\3\0\2\227"+
    "\2\0\2\224\10\0\1\224\1\225\3\224\1\0\1\120"+
    "\2\0\1\120\1\0\1\167\2\0\1\120\1\0\1\120"+
    "\2\0\5\120\1\0\2\120\3\0\1\120\1\0\2\120"+
    "\21\0\2\120\10\0\1\120\1\0\3\120\1\0\1\121"+
    "\2\0\1\121\1\0\1\170\2\0\1\121\1\0\1\120"+
    "\2\51\5\121\1\0\2\121\3\0\1\121\1\0\2\121"+
    "\2\0\2\51\6\0\2\51\4\0\1\51\2\121\2\0"+
    "\1\51\5\0\1\121\1\0\3\121\5\0\1\171\3\236"+
    "\10\0\1\237\1\0\1\240\4\0\1\241\1\0\1\242"+
    "\6\0\6\236\3\0\2\236\15\0\1\171\4\0\1\4"+
    "\2\0\1\4\1\0\1\44\2\0\1\4\2\0\2\45"+
    "\5\4\1\0\2\4\3\0\1\243\1\0\2\4\2\0"+
    "\2\45\6\0\2\45\4\0\1\45\2\4\2\0\1\45"+
    "\5\0\1\4\1\0\3\4\1\0\1\173\2\0\1\173"+
    "\1\244\4\173\4\0\10\173\2\0\1\174\1\173\1\175"+
    "\2\173\4\0\6\173\3\0\2\173\2\0\2\173\10\0"+
    "\1\173\1\244\3\173\1\0\1\173\2\0\1\173\1\244"+
    "\4\173\4\0\1\173\1\245\6\173\2\0\1\174\1\246"+
    "\1\175\2\173\4\0\6\173\3\0\2\173\2\0\2\173"+
    "\10\0\1\173\1\244\3\173\1\0\1\173\2\0\1\173"+
    "\1\244\4\173\4\0\2\173\1\247\5\173\2\0\1\174"+
    "\1\173\1\175\2\173\4\0\6\173\3\0\2\173\2\0"+
    "\2\173\10\0\1\173\1\244\3\173\5\0\1\176\3\160"+
    "\10\0\1\204\1\162\1\205\1\0\1\164\2\0\1\206"+
    "\1\0\1\207\6\0\6\160\3\0\2\160\15\0\1\176"+
    "\4\0\1\52\2\0\1\52\1\116\1\123\2\0\1\52"+
    "\2\0\2\51\5\52\1\0\2\52\3\0\1\250\1\0"+
    "\2\52\2\0\2\51\6\0\2\51\4\0\1\51\2\52"+
    "\2\0\1\51\5\0\1\52\1\116\3\52\1\0\1\251"+
    "\2\0\1\251\1\252\1\253\2\254\1\251\4\0\5\251"+
    "\1\254\2\251\2\0\1\255\1\251\1\256\2\251\4\0"+
    "\6\254\3\0\2\254\2\0\2\251\10\0\1\251\1\252"+
    "\3\251\1\0\1\251\2\0\1\251\1\252\1\253\2\254"+
    "\1\251\4\0\4\251\1\257\1\254\2\251\2\0\1\255"+
    "\1\251\1\256\2\251\4\0\6\254\3\0\2\254\2\0"+
    "\2\251\10\0\1\251\1\252\3\251\1\0\1\251\2\0"+
    "\1\251\1\252\1\253\2\254\1\251\4\0\1\251\1\260"+
    "\3\251\1\254\2\251\2\0\1\255\1\261\1\256\2\251"+
    "\4\0\6\254\3\0\2\254\2\0\2\251\10\0\1\251"+
    "\1\252\3\251\1\0\1\251\2\0\1\251\1\252\1\253"+
    "\2\254\1\251\4\0\2\251\1\262\2\251\1\254\2\251"+
    "\2\0\1\255\1\251\1\256\2\251\4\0\6\254\3\0"+
    "\2\254\2\0\2\251\10\0\1\251\1\252\3\251\17\0"+
    "\1\263\2\0\1\230\53\0\1\224\2\0\1\224\1\225"+
    "\1\226\2\227\1\224\4\0\1\224\1\264\2\224\1\232"+
    "\1\227\2\224\2\0\1\227\1\224\1\227\2\224\4\0"+
    "\6\227\3\0\2\227\2\0\2\224\10\0\1\224\1\225"+
    "\3\224\1\0\1\224\2\0\1\224\1\225\1\226\2\227"+
    "\1\224\4\0\1\224\1\265\3\224\1\227\2\224\2\0"+
    "\1\227\1\266\1\227\2\224\4\0\6\227\3\0\2\227"+
    "\2\0\2\224\10\0\1\224\1\225\3\224\1\0\1\224"+
    "\2\0\1\224\1\225\1\226\2\227\1\224\4\0\2\224"+
    "\1\267\2\224\1\227\2\224\2\0\1\227\1\224\1\227"+
    "\2\224\4\0\6\227\3\0\2\227\2\0\2\224\10\0"+
    "\1\224\1\225\3\224\1\0\1\270\2\0\1\270\1\0"+
    "\1\270\2\0\1\270\4\0\5\270\1\0\2\270\3\0"+
    "\1\270\1\0\2\270\21\0\2\270\10\0\1\270\1\0"+
    "\3\270\1\0\1\270\2\0\1\270\1\0\1\270\2\0"+
    "\1\270\4\0\1\270\1\271\3\270\1\0\2\270\3\0"+
    "\1\272\1\0\2\270\21\0\2\270\10\0\1\270\1\0"+
    "\3\270\1\0\1\270\2\0\1\270\1\0\1\270\2\0"+
    "\1\270\4\0\2\270\1\273\2\270\1\0\2\270\3\0"+
    "\1\270\1\0\2\270\21\0\2\270\10\0\1\270\1\0"+
    "\3\270\2\0\1\213\24\0\1\274\34\0\1\213\62\0"+
    "\1\275\51\0\1\276\121\0\1\277\22\0\1\217\24\0"+
    "\1\300\34\0\1\217\10\0\13\301\1\0\61\301\5\0"+
    "\1\221\26\0\1\302\34\0\1\221\23\0\1\303\55\0"+
    "\1\33\2\0\1\33\1\0\1\106\2\0\1\33\2\0"+
    "\2\45\5\33\1\0\2\33\3\0\1\304\1\0\2\33"+
    "\2\0\2\45\6\0\2\45\4\0\1\45\2\33\2\0"+
    "\1\45\5\0\1\33\1\0\3\33\1\0\1\224\2\0"+
    "\1\224\1\116\1\224\2\0\1\224\4\0\5\224\1\0"+
    "\2\224\3\0\1\224\1\0\2\224\21\0\2\224\10\0"+
    "\1\224\1\116\3\224\5\0\1\225\3\227\10\0\1\161"+
    "\1\0\1\305\4\0\1\227\1\0\1\227\6\0\6\227"+
    "\3\0\2\227\15\0\1\225\4\0\1\224\2\0\1\224"+
    "\1\116\1\226\2\227\1\224\4\0\5\224\1\227\2\224"+
    "\2\0\1\227\1\224\1\227\2\224\4\0\6\227\3\0"+
    "\2\227\2\0\2\224\10\0\1\224\1\116\3\224\1\0"+
    "\1\306\2\0\1\306\1\225\3\227\1\306\4\0\5\306"+
    "\1\227\2\306\2\0\1\227\1\306\1\227\2\306\4\0"+
    "\6\227\3\0\2\227\2\0\2\306\10\0\1\306\1\225"+
    "\3\306\5\0\1\307\12\0\1\310\50\0\1\307\10\0"+
    "\1\231\3\210\12\0\1\210\4\0\1\211\1\0\1\212"+
    "\6\0\6\210\3\0\2\210\15\0\1\231\4\0\1\224"+
    "\2\0\1\224\1\311\1\224\2\0\1\224\4\0\2\224"+
    "\1\312\2\224\1\0\2\224\3\0\1\224\1\0\2\224"+
    "\21\0\2\224\10\0\1\224\1\311\3\224\1\0\1\224"+
    "\2\0\1\224\1\116\1\224\2\0\1\224\4\0\5\224"+
    "\1\0\2\224\3\0\1\224\1\0\1\235\1\224\21\0"+
    "\2\224\10\0\1\224\1\116\3\224\1\0\1\224\2\0"+
    "\1\224\1\313\1\224\2\0\1\224\2\134\2\0\5\224"+
    "\1\0\2\224\3\0\1\224\1\0\1\235\1\224\21\0"+
    "\2\224\10\0\1\224\1\313\3\224\1\0\1\224\2\0"+
    "\1\224\1\313\1\224\2\0\1\224\2\134\2\0\5\224"+
    "\1\0\2\224\3\0\1\224\1\0\2\224\21\0\2\224"+
    "\10\0\1\224\1\313\3\224\1\0\1\306\2\0\1\306"+
    "\1\0\1\306\2\0\1\306\4\0\5\306\1\0\2\306"+
    "\3\0\1\306\1\0\2\306\21\0\2\306\10\0\1\306"+
    "\1\0\3\306\17\0\1\263\56\0\1\306\2\0\1\306"+
    "\1\0\1\306\2\0\1\306\4\0\1\306\1\314\3\306"+
    "\1\0\2\306\3\0\1\306\1\0\2\306\21\0\2\306"+
    "\10\0\1\306\1\0\3\306\1\0\1\306\2\0\1\306"+
    "\1\0\1\306\2\0\1\306\4\0\1\306\1\315\3\306"+
    "\1\0\2\306\3\0\1\316\1\0\2\306\21\0\2\306"+
    "\10\0\1\306\1\0\3\306\1\0\1\306\2\0\1\306"+
    "\1\0\1\306\2\0\1\306\4\0\2\306\1\317\2\306"+
    "\1\0\2\306\3\0\1\306\1\0\2\306\21\0\2\306"+
    "\10\0\1\306\1\0\3\306\1\0\1\4\2\0\1\4"+
    "\1\171\1\44\2\0\1\4\2\0\2\45\5\4\1\0"+
    "\2\4\3\0\1\4\1\0\2\4\2\0\2\45\6\0"+
    "\2\45\4\0\1\45\2\4\2\0\1\45\5\0\1\4"+
    "\1\171\3\4\5\0\1\244\3\320\6\0\1\321\1\0"+
    "\1\322\1\323\1\320\1\0\2\321\1\0\1\320\1\0"+
    "\1\320\6\0\6\320\3\0\2\320\15\0\1\244\4\0"+
    "\1\173\2\0\1\173\1\244\4\173\4\0\10\173\2\0"+
    "\1\174\1\173\1\175\1\247\1\173\4\0\6\173\3\0"+
    "\2\173\2\0\2\173\10\0\1\173\1\244\3\173\1\0"+
    "\1\173\2\0\1\173\1\324\4\173\4\0\10\173\2\0"+
    "\1\174\1\173\1\175\1\247\1\173\4\0\6\173\3\0"+
    "\2\173\2\0\2\173\10\0\1\173\1\324\3\173\1\0"+
    "\1\173\2\0\1\173\1\324\4\173\4\0\10\173\2\0"+
    "\1\174\1\173\1\175\2\173\4\0\6\173\3\0\2\173"+
    "\2\0\2\173\10\0\1\173\1\324\3\173\1\0\1\52"+
    "\2\0\1\52\1\176\1\123\2\0\1\52\2\0\2\51"+
    "\5\52\1\0\2\52\3\0\1\52\1\0\2\52\2\0"+
    "\2\51\6\0\2\51\4\0\1\51\2\52\2\0\1\51"+
    "\5\0\1\52\1\176\3\52\1\0\1\251\2\0\1\251"+
    "\1\325\1\251\2\173\1\251\4\0\5\251\1\173\2\251"+
    "\2\0\1\174\1\251\1\175\2\251\4\0\6\173\3\0"+
    "\2\173\2\0\2\251\10\0\1\251\1\325\3\251\5\0"+
    "\1\252\3\326\6\0\1\321\1\0\1\327\1\323\1\330"+
    "\1\0\2\321\1\0\1\326\1\0\1\326\6\0\6\326"+
    "\3\0\2\326\15\0\1\252\4\0\1\251\2\0\1\251"+
    "\1\325\1\253\2\254\1\251\4\0\5\251\1\254\2\251"+
    "\2\0\1\255\1\251\1\256\2\251\4\0\6\254\3\0"+
    "\2\254\2\0\2\251\10\0\1\251\1\325\3\251\1\0"+
    "\1\331\2\0\1\331\1\252\3\254\1\331\4\0\5\331"+
    "\1\254\2\331\2\0\1\255\1\331\1\256\2\331\4\0"+
    "\6\254\3\0\2\254\2\0\2\331\10\0\1\331\1\252"+
    "\3\331\1\0\1\331\2\0\1\331\1\252\3\254\1\331"+
    "\4\0\1\331\1\332\3\331\1\254\2\331\2\0\1\255"+
    "\1\333\1\256\2\331\4\0\6\254\3\0\2\254\2\0"+
    "\2\331\10\0\1\331\1\252\3\331\1\0\1\331\2\0"+
    "\1\331\1\252\3\254\1\331\4\0\2\331\1\334\2\331"+
    "\1\254\2\331\2\0\1\255\1\331\1\256\2\331\4\0"+
    "\6\254\3\0\2\254\2\0\2\331\10\0\1\331\1\252"+
    "\3\331\1\0\1\251\2\0\1\251\1\335\1\251\2\173"+
    "\1\251\4\0\2\251\1\336\2\251\1\173\2\251\2\0"+
    "\1\174\1\251\1\175\2\251\4\0\6\173\3\0\2\173"+
    "\2\0\2\251\10\0\1\251\1\335\3\251\1\0\1\251"+
    "\2\0\1\251\1\325\1\251\2\173\1\251\4\0\5\251"+
    "\1\173\2\251\2\0\1\174\1\251\1\175\1\262\1\251"+
    "\4\0\6\173\3\0\2\173\2\0\2\251\10\0\1\251"+
    "\1\325\3\251\1\0\1\251\2\0\1\251\1\337\1\251"+
    "\2\173\1\251\2\134\2\0\5\251\1\173\2\251\2\0"+
    "\1\174\1\251\1\175\1\262\1\251\4\0\6\173\3\0"+
    "\2\173\2\0\2\251\10\0\1\251\1\337\3\251\1\0"+
    "\1\251\2\0\1\251\1\337\1\251\2\173\1\251\2\134"+
    "\2\0\5\251\1\173\2\251\2\0\1\174\1\251\1\175"+
    "\2\251\4\0\6\173\3\0\2\173\2\0\2\251\10\0"+
    "\1\251\1\337\3\251\34\0\1\340\41\0\1\224\2\0"+
    "\1\224\1\116\1\224\2\0\1\224\4\0\5\224\1\0"+
    "\2\224\3\0\1\224\1\0\1\224\1\341\21\0\2\224"+
    "\10\0\1\224\1\116\3\224\1\0\1\224\2\0\1\224"+
    "\1\116\1\224\2\0\1\224\4\0\5\224\1\0\2\224"+
    "\3\0\1\224\1\0\1\267\1\224\21\0\2\224\10\0"+
    "\1\224\1\116\3\224\1\0\1\224\2\0\1\224\1\133"+
    "\1\224\2\0\1\224\2\134\2\0\5\224\1\0\2\224"+
    "\3\0\1\224\1\0\1\267\1\224\21\0\2\224\10\0"+
    "\1\224\1\133\3\224\1\0\1\224\2\0\1\224\1\133"+
    "\1\224\2\0\1\224\2\134\2\0\5\224\1\0\2\224"+
    "\3\0\1\224\1\0\2\224\21\0\2\224\10\0\1\224"+
    "\1\133\3\224\1\0\1\270\2\0\1\270\1\342\1\270"+
    "\2\0\1\270\4\0\5\270\1\0\2\270\3\0\1\270"+
    "\1\0\2\270\21\0\2\270\10\0\1\270\1\342\3\270"+
    "\1\0\1\270\2\0\1\270\1\342\1\270\2\0\1\270"+
    "\4\0\5\270\1\0\2\270\3\0\1\270\1\0\1\273"+
    "\1\270\21\0\2\270\10\0\1\270\1\342\3\270\1\0"+
    "\1\270\2\0\1\270\1\343\1\270\2\0\1\270\2\134"+
    "\2\0\5\270\1\0\2\270\3\0\1\270\1\0\1\273"+
    "\1\270\21\0\2\270\10\0\1\270\1\343\3\270\1\0"+
    "\1\270\2\0\1\270\1\343\1\270\2\0\1\270\2\134"+
    "\2\0\5\270\1\0\2\270\3\0\1\270\1\0\2\270"+
    "\21\0\2\270\10\0\1\270\1\343\3\270\5\0\1\274"+
    "\4\0\2\274\55\0\1\274\32\0\1\300\52\0\1\344"+
    "\63\0\1\344\10\0\1\345\63\0\1\345\41\0\1\145"+
    "\43\0\1\346\63\0\1\346\63\0\1\347\45\0\1\350"+
    "\44\0\1\33\2\0\1\33\1\171\1\106\2\0\1\33"+
    "\2\0\2\45\5\33\1\0\2\33\3\0\1\33\1\0"+
    "\2\33\2\0\2\45\6\0\2\45\4\0\1\45\2\33"+
    "\2\0\1\45\5\0\1\33\1\171\3\33\1\0\1\306"+
    "\2\0\1\306\1\225\3\227\1\306\4\0\4\306\1\351"+
    "\1\227\2\306\2\0\1\227\1\306\1\227\2\306\4\0"+
    "\6\227\3\0\2\227\2\0\2\306\10\0\1\306\1\225"+
    "\3\306\1\0\1\306\2\0\1\306\1\225\1\306\2\0"+
    "\1\306\4\0\5\306\1\0\2\306\3\0\1\306\1\0"+
    "\2\306\21\0\2\306\10\0\1\306\1\225\3\306\5\0"+
    "\1\307\3\352\12\0\1\352\4\0\1\353\1\0\1\354"+
    "\6\0\6\352\3\0\2\352\15\0\1\307\10\0\1\307"+
    "\63\0\1\307\10\0\1\311\3\355\10\0\1\161\1\162"+
    "\1\356\1\0\1\164\2\0\1\357\1\0\1\360\6\0"+
    "\6\355\3\0\2\355\15\0\1\311\4\0\1\224\2\0"+
    "\1\224\1\311\1\224\2\0\1\224\4\0\5\224\1\0"+
    "\2\224\3\0\1\224\1\0\2\224\21\0\2\224\10\0"+
    "\1\224\1\311\3\224\5\0\1\313\3\160\1\0\2\134"+
    "\5\0\1\161\1\162\1\163\1\0\1\164\2\0\1\165"+
    "\1\0\1\166\6\0\6\160\3\0\2\160\15\0\1\313"+
    "\4\0\1\306\2\0\1\306\1\225\1\306\2\0\1\306"+
    "\4\0\5\306\1\0\2\306\3\0\1\306\1\0\1\306"+
    "\1\361\21\0\2\306\10\0\1\306\1\225\3\306\1\0"+
    "\1\306\2\0\1\306\1\225\1\306\2\0\1\306\4\0"+
    "\5\306\1\0\2\306\3\0\1\306\1\0\1\317\1\306"+
    "\21\0\2\306\10\0\1\306\1\225\3\306\1\0\1\306"+
    "\2\0\1\306\1\362\1\306\2\0\1\306\4\0\5\306"+
    "\1\0\2\306\3\0\1\306\1\0\1\317\1\306\21\0"+
    "\2\306\10\0\1\306\1\362\3\306\1\0\1\306\2\0"+
    "\1\306\1\362\1\306\2\0\1\306\4\0\5\306\1\0"+
    "\2\306\3\0\1\306\1\0\2\306\21\0\2\306\10\0"+
    "\1\306\1\362\3\306\1\0\1\363\2\0\1\363\1\244"+
    "\3\320\1\363\4\0\5\363\1\320\2\363\2\0\1\320"+
    "\1\363\1\320\2\363\4\0\6\320\3\0\2\320\2\0"+
    "\2\363\10\0\1\363\1\244\3\363\5\0\1\364\63\0"+
    "\1\364\25\0\1\365\57\0\1\364\16\0\1\321\44\0"+
    "\1\364\10\0\1\324\3\173\6\0\1\321\1\0\1\322"+
    "\1\323\1\173\1\0\2\321\1\0\1\173\1\0\1\173"+
    "\6\0\6\173\3\0\2\173\15\0\1\324\10\0\1\325"+
    "\3\366\6\0\1\321\1\0\1\327\1\367\1\370\1\0"+
    "\1\371\1\321\1\0\1\372\1\0\1\373\6\0\6\366"+
    "\3\0\2\366\15\0\1\325\4\0\1\374\2\0\1\374"+
    "\1\252\3\326\1\374\4\0\5\374\1\326\2\374\2\0"+
    "\1\326\1\374\1\326\2\374\4\0\6\326\3\0\2\326"+
    "\2\0\2\374\10\0\1\374\1\252\3\374\22\0\1\375"+
    "\53\0\1\374\2\0\1\374\1\252\3\326\1\374\4\0"+
    "\4\374\1\376\1\326\2\374\2\0\1\326\1\374\1\326"+
    "\2\374\4\0\6\326\3\0\2\326\2\0\2\374\10\0"+
    "\1\374\1\252\3\374\1\0\1\331\2\0\1\331\1\252"+
    "\1\331\2\173\1\331\4\0\5\331\1\173\2\331\2\0"+
    "\1\174\1\331\1\175\2\331\4\0\6\173\3\0\2\173"+
    "\2\0\2\331\10\0\1\331\1\252\3\331\1\0\1\331"+
    "\2\0\1\331\1\252\1\331\2\173\1\331\4\0\5\331"+
    "\1\173\2\331\2\0\1\174\1\331\1\175\1\334\1\331"+
    "\4\0\6\173\3\0\2\173\2\0\2\331\10\0\1\331"+
    "\1\252\3\331\1\0\1\331\2\0\1\331\1\377\1\331"+
    "\2\173\1\331\4\0\5\331\1\173\2\331\2\0\1\174"+
    "\1\331\1\175\1\334\1\331\4\0\6\173\3\0\2\173"+
    "\2\0\2\331\10\0\1\331\1\377\3\331\1\0\1\331"+
    "\2\0\1\331\1\377\1\331\2\173\1\331\4\0\5\331"+
    "\1\173\2\331\2\0\1\174\1\331\1\175\2\331\4\0"+
    "\6\173\3\0\2\173\2\0\2\331\10\0\1\331\1\377"+
    "\3\331\5\0\1\335\3\u0100\6\0\1\321\1\0\1\327"+
    "\1\367\1\u0101\1\0\1\371\1\321\1\0\1\u0102\1\0"+
    "\1\u0103\6\0\6\u0100\3\0\2\u0100\15\0\1\335\4\0"+
    "\1\251\2\0\1\251\1\335\1\251\2\173\1\251\4\0"+
    "\5\251\1\173\2\251\2\0\1\174\1\251\1\175\2\251"+
    "\4\0\6\173\3\0\2\173\2\0\2\251\10\0\1\251"+
    "\1\335\3\251\5\0\1\337\3\200\1\0\2\134\3\0"+
    "\1\321\1\0\1\327\1\367\1\201\1\0\1\371\1\321"+
    "\1\0\1\u0104\1\0\1\u0105\6\0\6\200\3\0\2\200"+
    "\15\0\1\337\10\0\1\171\26\0\1\u0106\34\0\1\171"+
    "\4\0\1\224\2\0\1\224\1\176\1\224\2\0\1\224"+
    "\4\0\5\224\1\0\2\224\3\0\1\224\1\0\1\224"+
    "\1\u0107\21\0\2\224\10\0\1\224\1\176\3\224\5\0"+
    "\1\342\3\210\11\0\1\162\1\210\1\0\1\164\2\0"+
    "\1\211\1\0\1\212\6\0\6\210\3\0\2\210\15\0"+
    "\1\342\10\0\1\343\3\210\1\0\2\134\6\0\1\162"+
    "\1\210\1\0\1\164\2\0\1\211\1\0\1\212\6\0"+
    "\6\210\3\0\2\210\15\0\1\343\3\0\36\345\1\u0108"+
    "\36\345\2\0\1\u0109\2\0\1\346\56\0\1\u0109\4\0"+
    "\1\346\64\0\1\u010a\104\0\1\u010b\4\0\1\306\2\0"+
    "\1\306\1\u010c\1\306\2\0\1\306\4\0\2\306\1\u010d"+
    "\2\306\1\0\2\306\3\0\1\306\1\0\2\306\21\0"+
    "\2\306\10\0\1\306\1\u010c\3\306\1\0\1\u010e\2\0"+
    "\1\u010e\1\u010f\3\352\1\u010e\4\0\5\u010e\1\352\2\u010e"+
    "\2\0\1\352\1\u010e\1\352\2\u010e\4\0\6\352\3\0"+
    "\2\352\2\0\2\u010e\10\0\1\u010e\1\u010f\3\u010e\1\0"+
    "\1\u010e\2\0\1\u010e\1\u010f\3\352\1\u010e\4\0\1\u010e"+
    "\1\u0110\3\u010e\1\352\2\u010e\2\0\1\352\1\u0111\1\352"+
    "\2\u010e\4\0\6\352\3\0\2\352\2\0\2\u010e\10\0"+
    "\1\u010e\1\u010f\3\u010e\1\0\1\u010e\2\0\1\u010e\1\u010f"+
    "\3\352\1\u010e\4\0\2\u010e\1\u0112\2\u010e\1\352\2\u010e"+
    "\2\0\1\352\1\u010e\1\352\2\u010e\4\0\6\352\3\0"+
    "\2\352\2\0\2\u010e\10\0\1\u010e\1\u010f\3\u010e\1\0"+
    "\1\u0113\2\0\1\u0113\1\u0114\1\u0115\2\u0116\1\u0113\4\0"+
    "\5\u0113\1\u0116\2\u0113\2\0\1\u0116\1\u0113\1\u0116\2\u0113"+
    "\4\0\6\u0116\3\0\2\u0116\2\0\2\u0113\10\0\1\u0113"+
    "\1\u0114\3\u0113\1\0\1\u0113\2\0\1\u0113\1\u0114\1\u0115"+
    "\2\u0116\1\u0113\4\0\4\u0113\1\u0117\1\u0116\2\u0113\2\0"+
    "\1\u0116\1\u0113\1\u0116\2\u0113\4\0\6\u0116\3\0\2\u0116"+
    "\2\0\2\u0113\10\0\1\u0113\1\u0114\3\u0113\1\0\1\u0113"+
    "\2\0\1\u0113\1\u0114\1\u0115\2\u0116\1\u0113\4\0\1\u0113"+
    "\1\u0118\3\u0113\1\u0116\2\u0113\2\0\1\u0116\1\u0119\1\u0116"+
    "\2\u0113\4\0\6\u0116\3\0\2\u0116\2\0\2\u0113\10\0"+
    "\1\u0113\1\u0114\3\u0113\1\0\1\u0113\2\0\1\u0113\1\u0114"+
    "\1\u0115\2\u0116\1\u0113\4\0\2\u0113\1\u011a\2\u0113\1\u0116"+
    "\2\u0113\2\0\1\u0116\1\u0113\1\u0116\2\u0113\4\0\6\u0116"+
    "\3\0\2\u0116\2\0\2\u0113\10\0\1\u0113\1\u0114\3\u0113"+
    "\1\0\1\306\2\0\1\306\1\362\1\306\2\0\1\306"+
    "\4\0\5\306\1\0\2\306\3\0\1\306\1\0\1\306"+
    "\1\u011b\21\0\2\306\10\0\1\306\1\362\3\306\5\0"+
    "\1\362\3\227\10\0\1\204\1\0\1\u011c\4\0\1\u011d"+
    "\1\0\1\u011e\6\0\6\227\3\0\2\227\15\0\1\362"+
    "\4\0\1\363\2\0\1\363\1\244\1\363\2\0\1\363"+
    "\4\0\5\363\1\0\2\363\3\0\1\363\1\0\2\363"+
    "\21\0\2\363\10\0\1\363\1\244\3\363\5\0\1\364"+
    "\3\320\10\0\1\322\1\0\1\320\4\0\1\320\1\0"+
    "\1\320\6\0\6\320\3\0\2\320\15\0\1\364\10\0"+
    "\1\u011f\12\0\1\u0120\50\0\1\u011f\4\0\1\u0121\2\0"+
    "\1\u0121\1\252\1\u0122\2\326\1\u0121\4\0\5\u0121\1\326"+
    "\2\u0121\2\0\1\326\1\u0121\1\326\2\u0121\4\0\6\326"+
    "\3\0\2\326\2\0\2\u0121\10\0\1\u0121\1\252\3\u0121"+
    "\5\0\1\u0123\16\0\1\371\44\0\1\u0123\4\0\1\u0121"+
    "\2\0\1\u0121\1\252\1\u0122\2\326\1\u0121\4\0\4\u0121"+
    "\1\u0124\1\326\2\u0121\2\0\1\326\1\u0121\1\326\2\u0121"+
    "\4\0\6\326\3\0\2\326\2\0\2\u0121\10\0\1\u0121"+
    "\1\252\3\u0121\5\0\1\u0123\63\0\1\u0123\4\0\1\u0121"+
    "\2\0\1\u0121\1\252\1\u0122\2\326\1\u0121\4\0\1\u0121"+
    "\1\u0125\3\u0121\1\326\2\u0121\2\0\1\326\1\u0126\1\326"+
    "\2\u0121\4\0\6\326\3\0\2\326\2\0\2\u0121\10\0"+
    "\1\u0121\1\252\3\u0121\1\0\1\u0121\2\0\1\u0121\1\252"+
    "\1\u0122\2\326\1\u0121\4\0\2\u0121\1\u0127\2\u0121\1\326"+
    "\2\u0121\2\0\1\326\1\u0121\1\326\2\u0121\4\0\6\326"+
    "\3\0\2\326\2\0\2\u0121\10\0\1\u0121\1\252\3\u0121"+
    "\1\0\1\374\2\0\1\374\1\252\1\374\2\0\1\374"+
    "\4\0\5\374\1\0\2\374\3\0\1\374\1\0\2\374"+
    "\21\0\2\374\10\0\1\374\1\252\3\374\5\0\1\u0128"+
    "\12\0\1\u0129\50\0\1\u0128\4\0\1\374\2\0\1\374"+
    "\1\u012a\1\374\2\0\1\374\4\0\2\374\1\u012b\2\374"+
    "\1\0\2\374\3\0\1\374\1\0\2\374\21\0\2\374"+
    "\10\0\1\374\1\u012a\3\374\5\0\1\377\3\254\6\0"+
    "\1\321\1\0\1\327\1\323\1\u012c\1\0\2\321\1\0"+
    "\1\254\1\0\1\254\6\0\6\254\3\0\2\254\15\0"+
    "\1\377\4\0\1\u012d\2\0\1\u012d\1\u012e\1\u012f\2\u0130"+
    "\1\u012d\4\0\5\u012d\1\u0130\2\u012d\2\0\1\u0130\1\u012d"+
    "\1\u0130\2\u012d\4\0\6\u0130\3\0\2\u0130\2\0\2\u012d"+
    "\10\0\1\u012d\1\u012e\3\u012d\1\0\1\u012d\2\0\1\u012d"+
    "\1\u012e\1\u012f\2\u0130\1\u012d\4\0\4\u012d\1\u0131\1\u0130"+
    "\2\u012d\2\0\1\u0130\1\u012d\1\u0130\2\u012d\4\0\6\u0130"+
    "\3\0\2\u0130\2\0\2\u012d\10\0\1\u012d\1\u012e\3\u012d"+
    "\1\0\1\u012d\2\0\1\u012d\1\u012e\1\u012f\2\u0130\1\u012d"+
    "\4\0\1\u012d\1\u0132\3\u012d\1\u0130\2\u012d\2\0\1\u0130"+
    "\1\u0133\1\u0130\2\u012d\4\0\6\u0130\3\0\2\u0130\2\0"+
    "\2\u012d\10\0\1\u012d\1\u012e\3\u012d\1\0\1\u012d\2\0"+
    "\1\u012d\1\u012e\1\u012f\2\u0130\1\u012d\4\0\2\u012d\1\u0134"+
    "\2\u012d\1\u0130\2\u012d\2\0\1\u0130\1\u012d\1\u0130\2\u012d"+
    "\4\0\6\u0130\3\0\2\u0130\2\0\2\u012d\10\0\1\u012d"+
    "\1\u012e\3\u012d\1\0\1\251\2\0\1\251\1\252\1\253"+
    "\2\254\1\251\4\0\1\251\1\u0135\3\251\1\254\2\251"+
    "\2\0\1\255\1\u0136\1\256\2\251\4\0\6\254\3\0"+
    "\2\254\2\0\2\251\10\0\1\251\1\252\3\251\1\0"+
    "\1\251\2\0\1\251\1\252\1\253\2\254\1\251\4\0"+
    "\2\251\1\u0137\2\251\1\254\2\251\2\0\1\255\1\251"+
    "\1\256\2\251\4\0\6\254\3\0\2\254\2\0\2\251"+
    "\10\0\1\251\1\252\3\251\31\0\1\u0138\44\0\1\224"+
    "\2\0\1\224\1\116\1\224\2\0\1\224\4\0\5\224"+
    "\1\0\2\224\3\0\1\u0139\1\0\2\224\21\0\2\224"+
    "\10\0\1\224\1\116\3\224\2\144\1\u013a\1\0\1\u013b"+
    "\1\0\5\144\1\0\1\144\1\0\10\144\2\0\7\144"+
    "\1\0\14\144\1\0\6\144\1\0\1\u013a\4\144\1\0"+
    "\3\144\16\0\1\u013c\150\0\1\u013d\7\0\1\u010c\3\u0116"+
    "\10\0\1\161\1\0\1\u013e\4\0\1\u013f\1\0\1\u0140"+
    "\6\0\6\u0116\3\0\2\u0116\15\0\1\u010c\4\0\1\306"+
    "\2\0\1\306\1\u010c\1\306\2\0\1\306\4\0\5\306"+
    "\1\0\2\306\3\0\1\306\1\0\2\306\21\0\2\306"+
    "\10\0\1\306\1\u010c\3\306\1\0\1\u010e\2\0\1\u010e"+
    "\1\u010f\1\u010e\2\0\1\u010e\4\0\5\u010e\1\0\2\u010e"+
    "\3\0\1\u010e\1\0\2\u010e\21\0\2\u010e\10\0\1\u010e"+
    "\1\u010f\3\u010e\5\0\1\u010f\3\u0141\12\0\1\u0141\4\0"+
    "\1\u0142\1\0\1\u0143\6\0\6\u0141\3\0\2\u0141\15\0"+
    "\1\u010f\4\0\1\u010e\2\0\1\u010e\1\u010f\1\u010e\2\0"+
    "\1\u010e\4\0\5\u010e\1\0\2\u010e\3\0\1\u010e\1\0"+
    "\1\u0112\1\u010e\21\0\2\u010e\10\0\1\u010e\1\u010f\3\u010e"+
    "\1\0\1\u010e\2\0\1\u010e\1\u0144\1\u010e\2\0\1\u010e"+
    "\4\0\5\u010e\1\0\2\u010e\3\0\1\u010e\1\0\1\u0112"+
    "\1\u010e\21\0\2\u010e\10\0\1\u010e\1\u0144\3\u010e\1\0"+
    "\1\u010e\2\0\1\u010e\1\u0144\1\u010e\2\0\1\u010e\4\0"+
    "\5\u010e\1\0\2\u010e\3\0\1\u010e\1\0\2\u010e\21\0"+
    "\2\u010e\10\0\1\u010e\1\u0144\3\u010e\1\0\1\u0113\2\0"+
    "\1\u0113\1\u0145\1\u0113\2\0\1\u0113\4\0\5\u0113\1\0"+
    "\2\u0113\3\0\1\u0113\1\0\2\u0113\21\0\2\u0113\10\0"+
    "\1\u0113\1\u0145\3\u0113\5\0\1\u0114\3\u0146\10\0\1\161"+
    "\1\0\1\u0147\4\0\1\u0148\1\0\1\u0149\6\0\6\u0146"+
    "\3\0\2\u0146\15\0\1\u0114\4\0\1\u0113\2\0\1\u0113"+
    "\1\u0145\1\u0115\2\u0116\1\u0113\4\0\5\u0113\1\u0116\2\u0113"+
    "\2\0\1\u0116\1\u0113\1\u0116\2\u0113\4\0\6\u0116\3\0"+
    "\2\u0116\2\0\2\u0113\10\0\1\u0113\1\u0145\3\u0113\1\0"+
    "\1\u014a\2\0\1\u014a\1\u0114\3\u0116\1\u014a\4\0\5\u014a"+
    "\1\u0116\2\u014a\2\0\1\u0116\1\u014a\1\u0116\2\u014a\4\0"+
    "\6\u0116\3\0\2\u0116\2\0\2\u014a\10\0\1\u014a\1\u0114"+
    "\3\u014a\1\0\1\u0113\2\0\1\u0113\1\311\1\u0113\2\0"+
    "\1\u0113\4\0\2\u0113\1\u014b\2\u0113\1\0\2\u0113\3\0"+
    "\1\u0113\1\0\2\u0113\21\0\2\u0113\10\0\1\u0113\1\311"+
    "\3\u0113\1\0\1\u0113\2\0\1\u0113\1\u0145\1\u0113\2\0"+
    "\1\u0113\4\0\5\u0113\1\0\2\u0113\3\0\1\u0113\1\0"+
    "\1\u011a\1\u0113\21\0\2\u0113\10\0\1\u0113\1\u0145\3\u0113"+
    "\1\0\1\u0113\2\0\1\u0113\1\u014c\1\u0113\2\0\1\u0113"+
    "\2\134\2\0\5\u0113\1\0\2\u0113\3\0\1\u0113\1\0"+
    "\1\u011a\1\u0113\21\0\2\u0113\10\0\1\u0113\1\u014c\3\u0113"+
    "\1\0\1\u0113\2\0\1\u0113\1\u014c\1\u0113\2\0\1\u0113"+
    "\2\134\2\0\5\u0113\1\0\2\u0113\3\0\1\u0113\1\0"+
    "\2\u0113\21\0\2\u0113\10\0\1\u0113\1\u014c\3\u0113\1\0"+
    "\1\306\2\0\1\306\1\225\1\306\2\0\1\306\4\0"+
    "\5\306\1\0\2\306\3\0\1\317\1\0\2\306\21\0"+
    "\2\306\10\0\1\306\1\225\3\306\1\0\1\306\2\0"+
    "\1\306\1\225\3\227\1\306\4\0\1\306\1\314\2\306"+
    "\1\351\1\227\2\306\2\0\1\227\1\306\1\227\2\306"+
    "\4\0\6\227\3\0\2\227\2\0\2\306\10\0\1\306"+
    "\1\225\3\306\1\0\1\306\2\0\1\306\1\225\3\227"+
    "\1\306\4\0\1\306\1\315\3\306\1\227\2\306\2\0"+
    "\1\227\1\316\1\227\2\306\4\0\6\227\3\0\2\227"+
    "\2\0\2\306\10\0\1\306\1\225\3\306\1\0\1\306"+
    "\2\0\1\306\1\225\3\227\1\306\4\0\2\306\1\317"+
    "\2\306\1\227\2\306\2\0\1\227\1\306\1\227\2\306"+
    "\4\0\6\227\3\0\2\227\2\0\2\306\10\0\1\306"+
    "\1\225\3\306\5\0\1\u011f\3\320\12\0\1\320\4\0"+
    "\1\320\1\0\1\320\6\0\6\320\3\0\2\320\15\0"+
    "\1\u011f\10\0\1\u011f\63\0\1\u011f\4\0\1\u0121\2\0"+
    "\1\u0121\1\325\1\u0121\2\0\1\u0121\4\0\5\u0121\1\0"+
    "\2\u0121\3\0\1\u0121\1\0\2\u0121\21\0\2\u0121\10\0"+
    "\1\u0121\1\325\3\u0121\1\0\1\u0121\2\0\1\u0121\1\325"+
    "\1\u0122\2\326\1\u0121\4\0\5\u0121\1\326\2\u0121\2\0"+
    "\1\326\1\u0121\1\326\2\u0121\4\0\6\326\3\0\2\326"+
    "\2\0\2\u0121\10\0\1\u0121\1\325\3\u0121\5\0\1\u0123"+
    "\3\u014d\10\0\1\322\1\0\1\u014d\4\0\1\u014e\1\0"+
    "\1\u014f\6\0\6\u014d\3\0\2\u014d\15\0\1\u0123\4\0"+
    "\1\u0121\2\0\1\u0121\1\335\1\u0121\2\0\1\u0121\4\0"+
    "\2\u0121\1\u0150\2\u0121\1\0\2\u0121\3\0\1\u0121\1\0"+
    "\2\u0121\21\0\2\u0121\10\0\1\u0121\1\335\3\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\325\1\u0121\2\0\1\u0121\4\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\1\u0127\1\u0121"+
    "\21\0\2\u0121\10\0\1\u0121\1\325\3\u0121\1\0\1\u0121"+
    "\2\0\1\u0121\1\u0151\1\u0121\2\0\1\u0121\2\134\2\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\1\u0127\1\u0121"+
    "\21\0\2\u0121\10\0\1\u0121\1\u0151\3\u0121\1\0\1\u0121"+
    "\2\0\1\u0121\1\u0151\1\u0121\2\0\1\u0121\2\134\2\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\2\u0121\21\0"+
    "\2\u0121\10\0\1\u0121\1\u0151\3\u0121\5\0\1\u0128\3\u0152"+
    "\12\0\1\u0152\4\0\1\u0153\1\0\1\u0154\6\0\6\u0152"+
    "\3\0\2\u0152\15\0\1\u0128\10\0\1\u0128\63\0\1\u0128"+
    "\10\0\1\u012a\3\u0130\6\0\1\321\1\0\1\327\1\323"+
    "\1\u0155\1\0\2\321\1\0\1\u0156\1\0\1\u0157\6\0"+
    "\6\u0130\3\0\2\u0130\15\0\1\u012a\4\0\1\374\2\0"+
    "\1\374\1\u012a\1\374\2\0\1\374\4\0\5\374\1\0"+
    "\2\374\3\0\1\374\1\0\2\374\21\0\2\374\10\0"+
    "\1\374\1\u012a\3\374\1\0\1\331\2\0\1\331\1\252"+
    "\3\254\1\331\4\0\4\331\1\u0158\1\254\2\331\2\0"+
    "\1\255\1\331\1\256\2\331\4\0\6\254\3\0\2\254"+
    "\2\0\2\331\10\0\1\331\1\252\3\331\1\0\1\u012d"+
    "\2\0\1\u012d\1\u0159\1\u012d\2\0\1\u012d\4\0\5\u012d"+
    "\1\0\2\u012d\3\0\1\u012d\1\0\2\u012d\21\0\2\u012d"+
    "\10\0\1\u012d\1\u0159\3\u012d\5\0\1\u012e\3\u015a\6\0"+
    "\1\321\1\0\1\327\1\323\1\u015b\1\0\2\321\1\0"+
    "\1\u015c\1\0\1\u015d\6\0\6\u015a\3\0\2\u015a\15\0"+
    "\1\u012e\4\0\1\u012d\2\0\1\u012d\1\u0159\1\u012f\2\u0130"+
    "\1\u012d\4\0\5\u012d\1\u0130\2\u012d\2\0\1\u0130\1\u012d"+
    "\1\u0130\2\u012d\4\0\6\u0130\3\0\2\u0130\2\0\2\u012d"+
    "\10\0\1\u012d\1\u0159\3\u012d\1\0\1\u015e\2\0\1\u015e"+
    "\1\u012e\3\u0130\1\u015e\4\0\5\u015e\1\u0130\2\u015e\2\0"+
    "\1\u0130\1\u015e\1\u0130\2\u015e\4\0\6\u0130\3\0\2\u0130"+
    "\2\0\2\u015e\10\0\1\u015e\1\u012e\3\u015e\1\0\1\u012d"+
    "\2\0\1\u012d\1\335\1\u012d\2\0\1\u012d\4\0\2\u012d"+
    "\1\u015f\2\u012d\1\0\2\u012d\3\0\1\u012d\1\0\2\u012d"+
    "\21\0\2\u012d\10\0\1\u012d\1\335\3\u012d\1\0\1\u012d"+
    "\2\0\1\u012d\1\u0159\1\u012d\2\0\1\u012d\4\0\5\u012d"+
    "\1\0\2\u012d\3\0\1\u012d\1\0\1\u0134\1\u012d\21\0"+
    "\2\u012d\10\0\1\u012d\1\u0159\3\u012d\1\0\1\u012d\2\0"+
    "\1\u012d\1\u0160\1\u012d\2\0\1\u012d\2\134\2\0\5\u012d"+
    "\1\0\2\u012d\3\0\1\u012d\1\0\1\u0134\1\u012d\21\0"+
    "\2\u012d\10\0\1\u012d\1\u0160\3\u012d\1\0\1\u012d\2\0"+
    "\1\u012d\1\u0160\1\u012d\2\0\1\u012d\2\134\2\0\5\u012d"+
    "\1\0\2\u012d\3\0\1\u012d\1\0\2\u012d\21\0\2\u012d"+
    "\10\0\1\u012d\1\u0160\3\u012d\1\0\1\251\2\0\1\251"+
    "\1\325\1\251\2\173\1\251\4\0\5\251\1\173\2\251"+
    "\2\0\1\174\1\251\1\175\1\u0137\1\251\4\0\6\173"+
    "\3\0\2\173\2\0\2\251\10\0\1\251\1\325\3\251"+
    "\1\0\1\251\2\0\1\251\1\u0151\1\251\2\173\1\251"+
    "\2\134\2\0\5\251\1\173\2\251\2\0\1\174\1\251"+
    "\1\175\1\u0137\1\251\4\0\6\173\3\0\2\173\2\0"+
    "\2\251\10\0\1\251\1\u0151\3\251\1\0\1\251\2\0"+
    "\1\251\1\u0151\1\251\2\173\1\251\2\134\2\0\5\251"+
    "\1\173\2\251\2\0\1\174\1\251\1\175\2\251\4\0"+
    "\6\173\3\0\2\173\2\0\2\251\10\0\1\251\1\u0151"+
    "\3\251\5\0\1\171\63\0\1\171\4\0\1\224\2\0"+
    "\1\224\1\176\1\224\2\0\1\224\4\0\5\224\1\0"+
    "\2\224\3\0\1\224\1\0\2\224\21\0\2\224\10\0"+
    "\1\224\1\176\3\224\2\144\1\u013a\1\0\1\u013b\1\0"+
    "\5\144\1\0\1\144\1\145\10\144\2\0\7\144\1\0"+
    "\14\144\1\0\6\144\1\0\1\u013a\4\144\1\0\3\144"+
    "\4\u0161\1\u0162\10\u0161\1\u0163\57\u0161\17\0\1\u0164\145\0"+
    "\1\u0165\5\0\1\u014a\2\0\1\u014a\1\u0114\3\u0116\1\u014a"+
    "\4\0\4\u014a\1\u0166\1\u0116\2\u014a\2\0\1\u0116\1\u014a"+
    "\1\u0116\2\u014a\4\0\6\u0116\3\0\2\u0116\2\0\2\u014a"+
    "\10\0\1\u014a\1\u0114\3\u014a\1\0\1\u014a\2\0\1\u014a"+
    "\1\u0114\3\u0116\1\u014a\4\0\1\u014a\1\u0167\3\u014a\1\u0116"+
    "\2\u014a\2\0\1\u0116\1\u0168\1\u0116\2\u014a\4\0\6\u0116"+
    "\3\0\2\u0116\2\0\2\u014a\10\0\1\u014a\1\u0114\3\u014a"+
    "\1\0\1\u014a\2\0\1\u014a\1\u0114\3\u0116\1\u014a\4\0"+
    "\2\u014a\1\u0169\2\u014a\1\u0116\2\u014a\2\0\1\u0116\1\u014a"+
    "\1\u0116\2\u014a\4\0\6\u0116\3\0\2\u0116\2\0\2\u014a"+
    "\10\0\1\u014a\1\u0114\3\u014a\1\0\1\u016a\2\0\1\u016a"+
    "\1\0\3\u0141\1\u016a\4\0\5\u016a\1\u0141\2\u016a\2\0"+
    "\1\u0141\1\u016a\1\u0141\2\u016a\4\0\6\u0141\3\0\2\u0141"+
    "\2\0\2\u016a\10\0\1\u016a\1\0\3\u016a\1\0\1\u016a"+
    "\2\0\1\u016a\1\0\3\u0141\1\u016a\4\0\1\u016a\1\u016b"+
    "\3\u016a\1\u0141\2\u016a\2\0\1\u0141\1\u016c\1\u0141\2\u016a"+
    "\4\0\6\u0141\3\0\2\u0141\2\0\2\u016a\10\0\1\u016a"+
    "\1\0\3\u016a\1\0\1\u016a\2\0\1\u016a\1\0\3\u0141"+
    "\1\u016a\4\0\2\u016a\1\u016d\2\u016a\1\u0141\2\u016a\2\0"+
    "\1\u0141\1\u016a\1\u0141\2\u016a\4\0\6\u0141\3\0\2\u0141"+
    "\2\0\2\u016a\10\0\1\u016a\1\0\3\u016a\5\0\1\u0144"+
    "\3\352\12\0\1\352\4\0\1\352\1\0\1\352\6\0"+
    "\6\352\3\0\2\352\15\0\1\u0144\10\0\1\u0145\3\u016e"+
    "\10\0\1\161\1\162\1\u016f\1\0\1\164\2\0\1\u0170"+
    "\1\0\1\u0171\6\0\6\u016e\3\0\2\u016e\15\0\1\u0145"+
    "\4\0\1\u0172\2\0\1\u0172\1\225\3\u0146\1\u0172\4\0"+
    "\5\u0172\1\u0146\2\u0172\2\0\1\u0146\1\u0172\1\u0146\2\u0172"+
    "\4\0\6\u0146\3\0\2\u0146\2\0\2\u0172\10\0\1\u0172"+
    "\1\225\3\u0172\1\0\1\u0172\2\0\1\u0172\1\225\3\u0146"+
    "\1\u0172\4\0\4\u0172\1\u0173\1\u0146\2\u0172\2\0\1\u0146"+
    "\1\u0172\1\u0146\2\u0172\4\0\6\u0146\3\0\2\u0146\2\0"+
    "\2\u0172\10\0\1\u0172\1\225\3\u0172\1\0\1\u0172\2\0"+
    "\1\u0172\1\225\3\u0146\1\u0172\4\0\1\u0172\1\u0174\3\u0172"+
    "\1\u0146\2\u0172\2\0\1\u0146\1\u0175\1\u0146\2\u0172\4\0"+
    "\6\u0146\3\0\2\u0146\2\0\2\u0172\10\0\1\u0172\1\225"+
    "\3\u0172\1\0\1\u0172\2\0\1\u0172\1\225\3\u0146\1\u0172"+
    "\4\0\2\u0172\1\u0176\2\u0172\1\u0146\2\u0172\2\0\1\u0146"+
    "\1\u0172\1\u0146\2\u0172\4\0\6\u0146\3\0\2\u0146\2\0"+
    "\2\u0172\10\0\1\u0172\1\225\3\u0172\1\0\1\u014a\2\0"+
    "\1\u014a\1\u0114\1\u014a\2\0\1\u014a\4\0\5\u014a\1\0"+
    "\2\u014a\3\0\1\u014a\1\0\2\u014a\21\0\2\u014a\10\0"+
    "\1\u014a\1\u0114\3\u014a\1\0\1\u0113\2\0\1\u0113\1\311"+
    "\1\u0113\2\0\1\u0113\4\0\5\u0113\1\0\2\u0113\3\0"+
    "\1\u0113\1\0\2\u0113\21\0\2\u0113\10\0\1\u0113\1\311"+
    "\3\u0113\5\0\1\u014c\3\355\1\0\2\134\5\0\1\161"+
    "\1\162\1\356\1\0\1\164\2\0\1\u0177\1\0\1\u0178"+
    "\6\0\6\355\3\0\2\355\15\0\1\u014c\4\0\1\u0179"+
    "\2\0\1\u0179\1\244\1\u017a\2\320\1\u0179\4\0\5\u0179"+
    "\1\320\2\u0179\2\0\1\320\1\u0179\1\320\2\u0179\4\0"+
    "\6\320\3\0\2\320\2\0\2\u0179\10\0\1\u0179\1\244"+
    "\3\u0179\1\0\1\u0179\2\0\1\u0179\1\244\1\u017a\2\320"+
    "\1\u0179\4\0\1\u0179\1\u017b\3\u0179\1\320\2\u0179\2\0"+
    "\1\320\1\u017c\1\320\2\u0179\4\0\6\320\3\0\2\320"+
    "\2\0\2\u0179\10\0\1\u0179\1\244\3\u0179\1\0\1\u0179"+
    "\2\0\1\u0179\1\244\1\u017a\2\320\1\u0179\4\0\2\u0179"+
    "\1\u017d\2\u0179\1\320\2\u0179\2\0\1\320\1\u0179\1\320"+
    "\2\u0179\4\0\6\320\3\0\2\320\2\0\2\u0179\10\0"+
    "\1\u0179\1\244\3\u0179\1\0\1\u0121\2\0\1\u0121\1\335"+
    "\1\u0121\2\0\1\u0121\4\0\5\u0121\1\0\2\u0121\3\0"+
    "\1\u0121\1\0\2\u0121\21\0\2\u0121\10\0\1\u0121\1\335"+
    "\3\u0121\5\0\1\u0151\3\366\1\0\2\134\3\0\1\321"+
    "\1\0\1\327\1\367\1\370\1\0\1\371\1\321\1\0"+
    "\1\372\1\0\1\373\6\0\6\366\3\0\2\366\15\0"+
    "\1\u0151\4\0\1\u017e\2\0\1\u017e\1\u017f\3\u0152\1\u017e"+
    "\4\0\5\u017e\1\u0152\2\u017e\2\0\1\u0152\1\u017e\1\u0152"+
    "\2\u017e\4\0\6\u0152\3\0\2\u0152\2\0\2\u017e\10\0"+
    "\1\u017e\1\u017f\3\u017e\1\0\1\u017e\2\0\1\u017e\1\u017f"+
    "\3\u0152\1\u017e\4\0\1\u017e\1\u0180\3\u017e\1\u0152\2\u017e"+
    "\2\0\1\u0152\1\u0181\1\u0152\2\u017e\4\0\6\u0152\3\0"+
    "\2\u0152\2\0\2\u017e\10\0\1\u017e\1\u017f\3\u017e\1\0"+
    "\1\u017e\2\0\1\u017e\1\u017f\3\u0152\1\u017e\4\0\2\u017e"+
    "\1\u0182\2\u017e\1\u0152\2\u017e\2\0\1\u0152\1\u017e\1\u0152"+
    "\2\u017e\4\0\6\u0152\3\0\2\u0152\2\0\2\u017e\10\0"+
    "\1\u017e\1\u017f\3\u017e\1\0\1\u015e\2\0\1\u015e\1\u012e"+
    "\3\u0130\1\u015e\4\0\4\u015e\1\u0183\1\u0130\2\u015e\2\0"+
    "\1\u0130\1\u015e\1\u0130\2\u015e\4\0\6\u0130\3\0\2\u0130"+
    "\2\0\2\u015e\10\0\1\u015e\1\u012e\3\u015e\1\0\1\u015e"+
    "\2\0\1\u015e\1\u012e\3\u0130\1\u015e\4\0\1\u015e\1\u0184"+
    "\3\u015e\1\u0130\2\u015e\2\0\1\u0130\1\u0185\1\u0130\2\u015e"+
    "\4\0\6\u0130\3\0\2\u0130\2\0\2\u015e\10\0\1\u015e"+
    "\1\u012e\3\u015e\1\0\1\u015e\2\0\1\u015e\1\u012e\3\u0130"+
    "\1\u015e\4\0\2\u015e\1\u0186\2\u015e\1\u0130\2\u015e\2\0"+
    "\1\u0130\1\u015e\1\u0130\2\u015e\4\0\6\u0130\3\0\2\u0130"+
    "\2\0\2\u015e\10\0\1\u015e\1\u012e\3\u015e\1\0\1\331"+
    "\2\0\1\331\1\u012a\1\331\2\173\1\331\4\0\2\331"+
    "\1\u0187\2\331\1\173\2\331\2\0\1\174\1\331\1\175"+
    "\2\331\4\0\6\173\3\0\2\173\2\0\2\331\10\0"+
    "\1\331\1\u012a\3\331\5\0\1\u0159\3\u0188\6\0\1\321"+
    "\1\0\1\327\1\367\1\u0189\1\0\1\371\1\321\1\0"+
    "\1\u018a\1\0\1\u018b\6\0\6\u0188\3\0\2\u0188\15\0"+
    "\1\u0159\4\0\1\u018c\2\0\1\u018c\1\252\3\u015a\1\u018c"+
    "\4\0\5\u018c\1\u015a\2\u018c\2\0\1\u015a\1\u018c\1\u015a"+
    "\2\u018c\4\0\6\u015a\3\0\2\u015a\2\0\2\u018c\10\0"+
    "\1\u018c\1\252\3\u018c\1\0\1\u018c\2\0\1\u018c\1\252"+
    "\3\u015a\1\u018c\4\0\4\u018c\1\u018d\1\u015a\2\u018c\2\0"+
    "\1\u015a\1\u018c\1\u015a\2\u018c\4\0\6\u015a\3\0\2\u015a"+
    "\2\0\2\u018c\10\0\1\u018c\1\252\3\u018c\1\0\1\u018c"+
    "\2\0\1\u018c\1\252\3\u015a\1\u018c\4\0\1\u018c\1\u018e"+
    "\3\u018c\1\u015a\2\u018c\2\0\1\u015a\1\u018f\1\u015a\2\u018c"+
    "\4\0\6\u015a\3\0\2\u015a\2\0\2\u018c\10\0\1\u018c"+
    "\1\252\3\u018c\1\0\1\u018c\2\0\1\u018c\1\252\3\u015a"+
    "\1\u018c\4\0\2\u018c\1\u0190\2\u018c\1\u015a\2\u018c\2\0"+
    "\1\u015a\1\u018c\1\u015a\2\u018c\4\0\6\u015a\3\0\2\u015a"+
    "\2\0\2\u018c\10\0\1\u018c\1\252\3\u018c\1\0\1\u015e"+
    "\2\0\1\u015e\1\u012e\1\u015e\2\0\1\u015e\4\0\5\u015e"+
    "\1\0\2\u015e\3\0\1\u015e\1\0\2\u015e\21\0\2\u015e"+
    "\10\0\1\u015e\1\u012e\3\u015e\1\0\1\u012d\2\0\1\u012d"+
    "\1\335\1\u012d\2\0\1\u012d\4\0\5\u012d\1\0\2\u012d"+
    "\3\0\1\u012d\1\0\2\u012d\21\0\2\u012d\10\0\1\u012d"+
    "\1\335\3\u012d\5\0\1\u0160\3\u0100\1\0\2\134\3\0"+
    "\1\321\1\0\1\327\1\367\1\u0101\1\0\1\371\1\321"+
    "\1\0\1\u0191\1\0\1\u0192\6\0\6\u0100\3\0\2\u0100"+
    "\15\0\1\u0160\3\0\4\u0161\1\144\70\u0161\4\0\1\144"+
    "\10\0\1\145\77\0\1\u0193\105\0\1\u0194\44\0\1\u014a"+
    "\2\0\1\u014a\1\u010c\1\u014a\2\0\1\u014a\4\0\2\u014a"+
    "\1\u0195\2\u014a\1\0\2\u014a\3\0\1\u014a\1\0\2\u014a"+
    "\21\0\2\u014a\10\0\1\u014a\1\u010c\3\u014a\1\0\1\u014a"+
    "\2\0\1\u014a\1\u0114\1\u014a\2\0\1\u014a\4\0\5\u014a"+
    "\1\0\2\u014a\3\0\1\u014a\1\0\1\u0169\1\u014a\21\0"+
    "\2\u014a\10\0\1\u014a\1\u0114\3\u014a\1\0\1\u014a\2\0"+
    "\1\u014a\1\u0196\1\u014a\2\0\1\u014a\4\0\5\u014a\1\0"+
    "\2\u014a\3\0\1\u014a\1\0\1\u0169\1\u014a\21\0\2\u014a"+
    "\10\0\1\u014a\1\u0196\3\u014a\1\0\1\u014a\2\0\1\u014a"+
    "\1\u0196\1\u014a\2\0\1\u014a\4\0\5\u014a\1\0\2\u014a"+
    "\3\0\1\u014a\1\0\2\u014a\21\0\2\u014a\10\0\1\u014a"+
    "\1\u0196\3\u014a\1\0\1\u016a\2\0\1\u016a\1\0\1\u016a"+
    "\2\0\1\u016a\4\0\5\u016a\1\0\2\u016a\3\0\1\u016a"+
    "\1\0\2\u016a\21\0\2\u016a\10\0\1\u016a\1\0\3\u016a"+
    "\1\0\1\u016a\2\0\1\u016a\1\0\1\u016a\2\0\1\u016a"+
    "\4\0\5\u016a\1\0\2\u016a\3\0\1\u016a\1\0\1\u016d"+
    "\1\u016a\21\0\2\u016a\10\0\1\u016a\1\0\3\u016a\1\0"+
    "\1\u016a\2\0\1\u016a\1\u0197\1\u016a\2\0\1\u016a\4\0"+
    "\5\u016a\1\0\2\u016a\3\0\1\u016a\1\0\1\u016d\1\u016a"+
    "\21\0\2\u016a\10\0\1\u016a\1\u0197\3\u016a\1\0\1\u016a"+
    "\2\0\1\u016a\1\u0197\1\u016a\2\0\1\u016a\4\0\5\u016a"+
    "\1\0\2\u016a\3\0\1\u016a\1\0\2\u016a\21\0\2\u016a"+
    "\10\0\1\u016a\1\u0197\3\u016a\1\0\1\224\2\0\1\224"+
    "\1\225\1\u0198\2\u0146\1\224\4\0\5\224\1\u0146\2\224"+
    "\2\0\1\u0146\1\224\1\u0146\2\224\4\0\6\u0146\3\0"+
    "\2\u0146\2\0\2\224\10\0\1\224\1\225\3\224\1\0"+
    "\1\224\2\0\1\224\1\225\1\u0198\2\u0146\1\224\4\0"+
    "\4\224\1\232\1\u0146\2\224\2\0\1\u0146\1\224\1\u0146"+
    "\2\224\4\0\6\u0146\3\0\2\u0146\2\0\2\224\10\0"+
    "\1\224\1\225\3\224\1\0\1\224\2\0\1\224\1\225"+
    "\1\u0198\2\u0146\1\224\4\0\1\224\1\u0199\3\224\1\u0146"+
    "\2\224\2\0\1\u0146\1\u019a\1\u0146\2\224\4\0\6\u0146"+
    "\3\0\2\u0146\2\0\2\224\10\0\1\224\1\225\3\224"+
    "\1\0\1\224\2\0\1\224\1\225\1\u0198\2\u0146\1\224"+
    "\4\0\2\224\1\u019b\2\224\1\u0146\2\224\2\0\1\u0146"+
    "\1\224\1\u0146\2\224\4\0\6\u0146\3\0\2\u0146\2\0"+
    "\2\224\10\0\1\224\1\225\3\224\1\0\1\u0172\2\0"+
    "\1\u0172\1\225\1\u0172\2\0\1\u0172\4\0\5\u0172\1\0"+
    "\2\u0172\3\0\1\u0172\1\0\2\u0172\21\0\2\u0172\10\0"+
    "\1\u0172\1\225\3\u0172\1\0\1\u0172\2\0\1\u0172\1\u010c"+
    "\1\u0172\2\0\1\u0172\4\0\2\u0172\1\u019c\2\u0172\1\0"+
    "\2\u0172\3\0\1\u0172\1\0\2\u0172\21\0\2\u0172\10\0"+
    "\1\u0172\1\u010c\3\u0172\1\0\1\u0172\2\0\1\u0172\1\225"+
    "\1\u0172\2\0\1\u0172\4\0\5\u0172\1\0\2\u0172\3\0"+
    "\1\u0172\1\0\1\u0176\1\u0172\21\0\2\u0172\10\0\1\u0172"+
    "\1\225\3\u0172\1\0\1\u0172\2\0\1\u0172\1\u019d\1\u0172"+
    "\2\0\1\u0172\4\0\5\u0172\1\0\2\u0172\3\0\1\u0172"+
    "\1\0\1\u0176\1\u0172\21\0\2\u0172\10\0\1\u0172\1\u019d"+
    "\3\u0172\1\0\1\u0172\2\0\1\u0172\1\u019d\1\u0172\2\0"+
    "\1\u0172\4\0\5\u0172\1\0\2\u0172\3\0\1\u0172\1\0"+
    "\2\u0172\21\0\2\u0172\10\0\1\u0172\1\u019d\3\u0172\1\0"+
    "\1\u0113\2\0\1\u0113\1\u0114\1\u0115\2\u0116\1\u0113\4\0"+
    "\1\u0113\1\u019e\3\u0113\1\u0116\2\u0113\2\0\1\u0116\1\u019f"+
    "\1\u0116\2\u0113\4\0\6\u0116\3\0\2\u0116\2\0\2\u0113"+
    "\10\0\1\u0113\1\u0114\3\u0113\1\0\1\u0113\2\0\1\u0113"+
    "\1\u0114\1\u0115\2\u0116\1\u0113\4\0\2\u0113\1\u01a0\2\u0113"+
    "\1\u0116\2\u0113\2\0\1\u0116\1\u0113\1\u0116\2\u0113\4\0"+
    "\6\u0116\3\0\2\u0116\2\0\2\u0113\10\0\1\u0113\1\u0114"+
    "\3\u0113\1\0\1\u0179\2\0\1\u0179\1\u01a1\1\u0179\2\0"+
    "\1\u0179\4\0\5\u0179\1\0\2\u0179\3\0\1\u0179\1\0"+
    "\2\u0179\21\0\2\u0179\10\0\1\u0179\1\u01a1\3\u0179\1\0"+
    "\1\u0179\2\0\1\u0179\1\u01a1\1\u017a\2\320\1\u0179\4\0"+
    "\5\u0179\1\320\2\u0179\2\0\1\320\1\u0179\1\320\2\u0179"+
    "\4\0\6\320\3\0\2\320\2\0\2\u0179\10\0\1\u0179"+
    "\1\u01a1\3\u0179\1\0\1\u0179\2\0\1\u0179\1\u01a1\1\u0179"+
    "\2\0\1\u0179\4\0\5\u0179\1\0\2\u0179\3\0\1\u0179"+
    "\1\0\1\u017d\1\u0179\21\0\2\u0179\10\0\1\u0179\1\u01a1"+
    "\3\u0179\1\0\1\u0179\2\0\1\u0179\1\u01a2\1\u0179\2\0"+
    "\1\u0179\2\134\2\0\5\u0179\1\0\2\u0179\3\0\1\u0179"+
    "\1\0\1\u017d\1\u0179\21\0\2\u0179\10\0\1\u0179\1\u01a2"+
    "\3\u0179\1\0\1\u0179\2\0\1\u0179\1\u01a2\1\u0179\2\0"+
    "\1\u0179\2\134\2\0\5\u0179\1\0\2\u0179\3\0\1\u0179"+
    "\1\0\2\u0179\21\0\2\u0179\10\0\1\u0179\1\u01a2\3\u0179"+
    "\1\0\1\u017e\2\0\1\u017e\1\u017f\1\u017e\2\0\1\u017e"+
    "\4\0\5\u017e\1\0\2\u017e\3\0\1\u017e\1\0\2\u017e"+
    "\21\0\2\u017e\10\0\1\u017e\1\u017f\3\u017e\5\0\1\u017f"+
    "\3\u01a3\6\0\1\321\1\0\1\322\1\323\1\u01a3\1\0"+
    "\2\321\1\0\1\u01a4\1\0\1\u01a5\6\0\6\u01a3\3\0"+
    "\2\u01a3\15\0\1\u017f\4\0\1\u017e\2\0\1\u017e\1\u017f"+
    "\1\u017e\2\0\1\u017e\4\0\5\u017e\1\0\2\u017e\3\0"+
    "\1\u017e\1\0\1\u0182\1\u017e\21\0\2\u017e\10\0\1\u017e"+
    "\1\u017f\3\u017e\1\0\1\u017e\2\0\1\u017e\1\u01a6\1\u017e"+
    "\2\0\1\u017e\4\0\5\u017e\1\0\2\u017e\3\0\1\u017e"+
    "\1\0\1\u0182\1\u017e\21\0\2\u017e\10\0\1\u017e\1\u01a6"+
    "\3\u017e\1\0\1\u017e\2\0\1\u017e\1\u01a6\1\u017e\2\0"+
    "\1\u017e\4\0\5\u017e\1\0\2\u017e\3\0\1\u017e\1\0"+
    "\2\u017e\21\0\2\u017e\10\0\1\u017e\1\u01a6\3\u017e\1\0"+
    "\1\u015e\2\0\1\u015e\1\u012a\1\u015e\2\0\1\u015e\4\0"+
    "\2\u015e\1\u01a7\2\u015e\1\0\2\u015e\3\0\1\u015e\1\0"+
    "\2\u015e\21\0\2\u015e\10\0\1\u015e\1\u012a\3\u015e\1\0"+
    "\1\u015e\2\0\1\u015e\1\u012e\1\u015e\2\0\1\u015e\4\0"+
    "\5\u015e\1\0\2\u015e\3\0\1\u015e\1\0\1\u0186\1\u015e"+
    "\21\0\2\u015e\10\0\1\u015e\1\u012e\3\u015e\1\0\1\u015e"+
    "\2\0\1\u015e\1\u01a8\1\u015e\2\0\1\u015e\4\0\5\u015e"+
    "\1\0\2\u015e\3\0\1\u015e\1\0\1\u0186\1\u015e\21\0"+
    "\2\u015e\10\0\1\u015e\1\u01a8\3\u015e\1\0\1\u015e\2\0"+
    "\1\u015e\1\u01a8\1\u015e\2\0\1\u015e\4\0\5\u015e\1\0"+
    "\2\u015e\3\0\1\u015e\1\0\2\u015e\21\0\2\u015e\10\0"+
    "\1\u015e\1\u01a8\3\u015e\1\0\1\331\2\0\1\331\1\u012a"+
    "\1\331\2\173\1\331\4\0\5\331\1\173\2\331\2\0"+
    "\1\174\1\331\1\175\2\331\4\0\6\173\3\0\2\173"+
    "\2\0\2\331\10\0\1\331\1\u012a\3\331\1\0\1\u0121"+
    "\2\0\1\u0121\1\252\1\u01a9\2\u015a\1\u0121\4\0\5\u0121"+
    "\1\u015a\2\u0121\2\0\1\u015a\1\u0121\1\u015a\2\u0121\4\0"+
    "\6\u015a\3\0\2\u015a\2\0\2\u0121\10\0\1\u0121\1\252"+
    "\3\u0121\1\0\1\u0121\2\0\1\u0121\1\252\1\u01a9\2\u015a"+
    "\1\u0121\4\0\4\u0121\1\u0124\1\u015a\2\u0121\2\0\1\u015a"+
    "\1\u0121\1\u015a\2\u0121\4\0\6\u015a\3\0\2\u015a\2\0"+
    "\2\u0121\10\0\1\u0121\1\252\3\u0121\1\0\1\u0121\2\0"+
    "\1\u0121\1\252\1\u01a9\2\u015a\1\u0121\4\0\1\u0121\1\u01aa"+
    "\3\u0121\1\u015a\2\u0121\2\0\1\u015a\1\u01ab\1\u015a\2\u0121"+
    "\4\0\6\u015a\3\0\2\u015a\2\0\2\u0121\10\0\1\u0121"+
    "\1\252\3\u0121\1\0\1\u0121\2\0\1\u0121\1\252\1\u01a9"+
    "\2\u015a\1\u0121\4\0\2\u0121\1\u01ac\2\u0121\1\u015a\2\u0121"+
    "\2\0\1\u015a\1\u0121\1\u015a\2\u0121\4\0\6\u015a\3\0"+
    "\2\u015a\2\0\2\u0121\10\0\1\u0121\1\252\3\u0121\1\0"+
    "\1\u018c\2\0\1\u018c\1\252\1\u018c\2\0\1\u018c\4\0"+
    "\5\u018c\1\0\2\u018c\3\0\1\u018c\1\0\2\u018c\21\0"+
    "\2\u018c\10\0\1\u018c\1\252\3\u018c\1\0\1\u018c\2\0"+
    "\1\u018c\1\u012a\1\u018c\2\0\1\u018c\4\0\2\u018c\1\u01ad"+
    "\2\u018c\1\0\2\u018c\3\0\1\u018c\1\0\2\u018c\21\0"+
    "\2\u018c\10\0\1\u018c\1\u012a\3\u018c\1\0\1\u018c\2\0"+
    "\1\u018c\1\252\1\u018c\2\0\1\u018c\4\0\5\u018c\1\0"+
    "\2\u018c\3\0\1\u018c\1\0\1\u0190\1\u018c\21\0\2\u018c"+
    "\10\0\1\u018c\1\252\3\u018c\1\0\1\u018c\2\0\1\u018c"+
    "\1\u01ae\1\u018c\2\0\1\u018c\4\0\5\u018c\1\0\2\u018c"+
    "\3\0\1\u018c\1\0\1\u0190\1\u018c\21\0\2\u018c\10\0"+
    "\1\u018c\1\u01ae\3\u018c\1\0\1\u018c\2\0\1\u018c\1\u01ae"+
    "\1\u018c\2\0\1\u018c\4\0\5\u018c\1\0\2\u018c\3\0"+
    "\1\u018c\1\0\2\u018c\21\0\2\u018c\10\0\1\u018c\1\u01ae"+
    "\3\u018c\1\0\1\u012d\2\0\1\u012d\1\u012e\1\u012f\2\u0130"+
    "\1\u012d\4\0\1\u012d\1\u01af\3\u012d\1\u0130\2\u012d\2\0"+
    "\1\u0130\1\u01b0\1\u0130\2\u012d\4\0\6\u0130\3\0\2\u0130"+
    "\2\0\2\u012d\10\0\1\u012d\1\u012e\3\u012d\1\0\1\u012d"+
    "\2\0\1\u012d\1\u012e\1\u012f\2\u0130\1\u012d\4\0\2\u012d"+
    "\1\u01b1\2\u012d\1\u0130\2\u012d\2\0\1\u0130\1\u012d\1\u0130"+
    "\2\u012d\4\0\6\u0130\3\0\2\u0130\2\0\2\u012d\10\0"+
    "\1\u012d\1\u012e\3\u012d\13\u01b2\1\0\61\u01b2\73\0\1\u01b3"+
    "\2\0\1\u014a\2\0\1\u014a\1\u010c\1\u014a\2\0\1\u014a"+
    "\4\0\5\u014a\1\0\2\u014a\3\0\1\u014a\1\0\2\u014a"+
    "\21\0\2\u014a\10\0\1\u014a\1\u010c\3\u014a\5\0\1\u0196"+
    "\3\u0116\10\0\1\161\1\0\1\u013e\4\0\1\u0116\1\0"+
    "\1\u0116\6\0\6\u0116\3\0\2\u0116\15\0\1\u0196\10\0"+
    "\1\u0197\3\u0141\12\0\1\u0141\4\0\1\u0141\1\0\1\u0141"+
    "\6\0\6\u0141\3\0\2\u0141\15\0\1\u0197\4\0\1\224"+
    "\2\0\1\224\1\116\1\u0198\2\u0146\1\224\4\0\5\224"+
    "\1\u0146\2\224\2\0\1\u0146\1\224\1\u0146\2\224\4\0"+
    "\6\u0146\3\0\2\u0146\2\0\2\224\10\0\1\224\1\116"+
    "\3\224\1\0\1\224\2\0\1\224\1\116\1\224\2\0"+
    "\1\224\4\0\5\224\1\0\2\224\3\0\1\224\1\0"+
    "\1\u019b\1\224\21\0\2\224\10\0\1\224\1\116\3\224"+
    "\1\0\1\224\2\0\1\224\1\u01b4\1\224\2\0\1\224"+
    "\2\134\2\0\5\224\1\0\2\224\3\0\1\224\1\0"+
    "\1\u019b\1\224\21\0\2\224\10\0\1\224\1\u01b4\3\224"+
    "\1\0\1\224\2\0\1\224\1\u01b4\1\224\2\0\1\224"+
    "\2\134\2\0\5\224\1\0\2\224\3\0\1\224\1\0"+
    "\2\224\21\0\2\224\10\0\1\224\1\u01b4\3\224\1\0"+
    "\1\u0172\2\0\1\u0172\1\u010c\1\u0172\2\0\1\u0172\4\0"+
    "\5\u0172\1\0\2\u0172\3\0\1\u0172\1\0\2\u0172\21\0"+
    "\2\u0172\10\0\1\u0172\1\u010c\3\u0172\5\0\1\u019d\3\u0146"+
    "\10\0\1\161\1\0\1\u0147\4\0\1\u0146\1\0\1\u0146"+
    "\6\0\6\u0146\3\0\2\u0146\15\0\1\u019d\4\0\1\u0113"+
    "\2\0\1\u0113\1\u0145\1\u0113\2\0\1\u0113\4\0\5\u0113"+
    "\1\0\2\u0113\3\0\1\u0113\1\0\1\u01a0\1\u0113\21\0"+
    "\2\u0113\10\0\1\u0113\1\u0145\3\u0113\1\0\1\u0113\2\0"+
    "\1\u0113\1\u01b5\1\u0113\2\0\1\u0113\2\134\2\0\5\u0113"+
    "\1\0\2\u0113\3\0\1\u0113\1\0\1\u01a0\1\u0113\21\0"+
    "\2\u0113\10\0\1\u0113\1\u01b5\3\u0113\1\0\1\u0113\2\0"+
    "\1\u0113\1\u01b5\1\u0113\2\0\1\u0113\2\134\2\0\5\u0113"+
    "\1\0\2\u0113\3\0\1\u0113\1\0\2\u0113\21\0\2\u0113"+
    "\10\0\1\u0113\1\u01b5\3\u0113\5\0\1\u01a1\3\u014d\6\0"+
    "\1\321\1\0\1\322\1\367\1\u014d\1\0\1\371\1\321"+
    "\1\0\1\u014e\1\0\1\u014f\6\0\6\u014d\3\0\2\u014d"+
    "\15\0\1\u01a1\10\0\1\u01a2\3\u014d\1\0\2\134\3\0"+
    "\1\321\1\0\1\322\1\367\1\u014d\1\0\1\371\1\321"+
    "\1\0\1\u014e\1\0\1\u014f\6\0\6\u014d\3\0\2\u014d"+
    "\15\0\1\u01a2\4\0\1\u01b6\2\0\1\u01b6\1\244\3\u01a3"+
    "\1\u01b6\4\0\5\u01b6\1\u01a3\2\u01b6\2\0\1\u01a3\1\u01b6"+
    "\1\u01a3\2\u01b6\4\0\6\u01a3\3\0\2\u01a3\2\0\2\u01b6"+
    "\10\0\1\u01b6\1\244\3\u01b6\1\0\1\u01b6\2\0\1\u01b6"+
    "\1\244\3\u01a3\1\u01b6\4\0\1\u01b6\1\u01b7\3\u01b6\1\u01a3"+
    "\2\u01b6\2\0\1\u01a3\1\u01b8\1\u01a3\2\u01b6\4\0\6\u01a3"+
    "\3\0\2\u01a3\2\0\2\u01b6\10\0\1\u01b6\1\244\3\u01b6"+
    "\1\0\1\u01b6\2\0\1\u01b6\1\244\3\u01a3\1\u01b6\4\0"+
    "\2\u01b6\1\u01b9\2\u01b6\1\u01a3\2\u01b6\2\0\1\u01a3\1\u01b6"+
    "\1\u01a3\2\u01b6\4\0\6\u01a3\3\0\2\u01a3\2\0\2\u01b6"+
    "\10\0\1\u01b6\1\244\3\u01b6\5\0\1\u01a6\3\u0152\6\0"+
    "\1\321\1\0\1\322\1\323\1\u0152\1\0\2\321\1\0"+
    "\1\u0152\1\0\1\u0152\6\0\6\u0152\3\0\2\u0152\15\0"+
    "\1\u01a6\4\0\1\u015e\2\0\1\u015e\1\u012a\1\u015e\2\0"+
    "\1\u015e\4\0\5\u015e\1\0\2\u015e\3\0\1\u015e\1\0"+
    "\2\u015e\21\0\2\u015e\10\0\1\u015e\1\u012a\3\u015e\5\0"+
    "\1\u01a8\3\u0130\6\0\1\321\1\0\1\327\1\323\1\u0155"+
    "\1\0\2\321\1\0\1\u0130\1\0\1\u0130\6\0\6\u0130"+
    "\3\0\2\u0130\15\0\1\u01a8\4\0\1\u0121\2\0\1\u0121"+
    "\1\325\1\u01a9\2\u015a\1\u0121\4\0\5\u0121\1\u015a\2\u0121"+
    "\2\0\1\u015a\1\u0121\1\u015a\2\u0121\4\0\6\u015a\3\0"+
    "\2\u015a\2\0\2\u0121\10\0\1\u0121\1\325\3\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\325\1\u0121\2\0\1\u0121\4\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\1\u01ac\1\u0121"+
    "\21\0\2\u0121\10\0\1\u0121\1\325\3\u0121\1\0\1\u0121"+
    "\2\0\1\u0121\1\u01ba\1\u0121\2\0\1\u0121\2\134\2\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\1\u01ac\1\u0121"+
    "\21\0\2\u0121\10\0\1\u0121\1\u01ba\3\u0121\1\0\1\u0121"+
    "\2\0\1\u0121\1\u01ba\1\u0121\2\0\1\u0121\2\134\2\0"+
    "\5\u0121\1\0\2\u0121\3\0\1\u0121\1\0\2\u0121\21\0"+
    "\2\u0121\10\0\1\u0121\1\u01ba\3\u0121\1\0\1\u018c\2\0"+
    "\1\u018c\1\u012a\1\u018c\2\0\1\u018c\4\0\5\u018c\1\0"+
    "\2\u018c\3\0\1\u018c\1\0\2\u018c\21\0\2\u018c\10\0"+
    "\1\u018c\1\u012a\3\u018c\5\0\1\u01ae\3\u015a\6\0\1\321"+
    "\1\0\1\327\1\323\1\u015b\1\0\2\321\1\0\1\u015a"+
    "\1\0\1\u015a\6\0\6\u015a\3\0\2\u015a\15\0\1\u01ae"+
    "\4\0\1\u012d\2\0\1\u012d\1\u0159\1\u012d\2\0\1\u012d"+
    "\4\0\5\u012d\1\0\2\u012d\3\0\1\u012d\1\0\1\u01b1"+
    "\1\u012d\21\0\2\u012d\10\0\1\u012d\1\u0159\3\u012d\1\0"+
    "\1\u012d\2\0\1\u012d\1\u01bb\1\u012d\2\0\1\u012d\2\134"+
    "\2\0\5\u012d\1\0\2\u012d\3\0\1\u012d\1\0\1\u01b1"+
    "\1\u012d\21\0\2\u012d\10\0\1\u012d\1\u01bb\3\u012d\1\0"+
    "\1\u012d\2\0\1\u012d\1\u01bb\1\u012d\2\0\1\u012d\2\134"+
    "\2\0\5\u012d\1\0\2\u012d\3\0\1\u012d\1\0\2\u012d"+
    "\21\0\2\u012d\10\0\1\u012d\1\u01bb\3\u012d\5\0\1\u01bc"+
    "\63\0\1\u01bc\77\0\1\u01bd\5\0\1\u01b4\3\u016e\1\0"+
    "\2\134\5\0\1\161\1\162\1\u016f\1\0\1\164\2\0"+
    "\1\u01be\1\0\1\u01bf\6\0\6\u016e\3\0\2\u016e\15\0"+
    "\1\u01b4\10\0\1\u01b5\3\u016e\1\0\2\134\5\0\1\161"+
    "\1\162\1\u016f\1\0\1\164\2\0\1\u0170\1\0\1\u0171"+
    "\6\0\6\u016e\3\0\2\u016e\15\0\1\u01b5\4\0\1\u01b6"+
    "\2\0\1\u01b6\1\244\1\u01b6\2\0\1\u01b6\4\0\5\u01b6"+
    "\1\0\2\u01b6\3\0\1\u01b6\1\0\2\u01b6\21\0\2\u01b6"+
    "\10\0\1\u01b6\1\244\3\u01b6\1\0\1\u01b6\2\0\1\u01b6"+
    "\1\244\1\u01b6\2\0\1\u01b6\4\0\5\u01b6\1\0\2\u01b6"+
    "\3\0\1\u01b6\1\0\1\u01b9\1\u01b6\21\0\2\u01b6\10\0"+
    "\1\u01b6\1\244\3\u01b6\1\0\1\u01b6\2\0\1\u01b6\1\u01c0"+
    "\1\u01b6\2\0\1\u01b6\4\0\5\u01b6\1\0\2\u01b6\3\0"+
    "\1\u01b6\1\0\1\u01b9\1\u01b6\21\0\2\u01b6\10\0\1\u01b6"+
    "\1\u01c0\3\u01b6\1\0\1\u01b6\2\0\1\u01b6\1\u01c0\1\u01b6"+
    "\2\0\1\u01b6\4\0\5\u01b6\1\0\2\u01b6\3\0\1\u01b6"+
    "\1\0\2\u01b6\21\0\2\u01b6\10\0\1\u01b6\1\u01c0\3\u01b6"+
    "\5\0\1\u01ba\3\u0188\1\0\2\134\3\0\1\321\1\0"+
    "\1\327\1\367\1\u0189\1\0\1\371\1\321\1\0\1\u01c1"+
    "\1\0\1\u01c2\6\0\6\u0188\3\0\2\u0188\15\0\1\u01ba"+
    "\10\0\1\u01bb\3\u0188\1\0\2\134\3\0\1\321\1\0"+
    "\1\327\1\367\1\u0189\1\0\1\371\1\321\1\0\1\u018a"+
    "\1\0\1\u018b\6\0\6\u0188\3\0\2\u0188\15\0\1\u01bb"+
    "\5\0\1\u01c3\2\0\1\u01bc\56\0\1\u01c3\4\0\1\u01bc"+
    "\34\0\1\u01c4\44\0\1\224\2\0\1\224\1\225\1\u0198"+
    "\2\u0146\1\224\4\0\1\224\1\233\3\224\1\u0146\2\224"+
    "\2\0\1\u0146\1\234\1\u0146\2\224\4\0\6\u0146\3\0"+
    "\2\u0146\2\0\2\224\10\0\1\224\1\225\3\224\1\0"+
    "\1\224\2\0\1\224\1\225\1\u0198\2\u0146\1\224\4\0"+
    "\2\224\1\235\2\224\1\u0146\2\224\2\0\1\u0146\1\224"+
    "\1\u0146\2\224\4\0\6\u0146\3\0\2\u0146\2\0\2\224"+
    "\10\0\1\224\1\225\3\224\5\0\1\u01c0\3\u01a3\6\0"+
    "\1\321\1\0\1\322\1\323\1\u01a3\1\0\2\321\1\0"+
    "\1\u01a3\1\0\1\u01a3\6\0\6\u01a3\3\0\2\u01a3\15\0"+
    "\1\u01c0\4\0\1\u0121\2\0\1\u0121\1\252\1\u01a9\2\u015a"+
    "\1\u0121\4\0\1\u0121\1\u0125\3\u0121\1\u015a\2\u0121\2\0"+
    "\1\u015a\1\u0126\1\u015a\2\u0121\4\0\6\u015a\3\0\2\u015a"+
    "\2\0\2\u0121\10\0\1\u0121\1\252\3\u0121\1\0\1\u0121"+
    "\2\0\1\u0121\1\252\1\u01a9\2\u015a\1\u0121\4\0\2\u0121"+
    "\1\u0127\2\u0121\1\u015a\2\u0121\2\0\1\u015a\1\u0121\1\u015a"+
    "\2\u0121\4\0\6\u015a\3\0\2\u015a\2\0\2\u0121\10\0"+
    "\1\u0121\1\252\3\u0121\2\u01c5\1\u01c6\1\0\1\u01c7\1\0"+
    "\5\u01c5\1\0\1\u01c5\1\0\10\u01c5\2\0\7\u01c5\1\0"+
    "\14\u01c5\1\0\6\u01c5\1\0\1\u01c6\4\u01c5\1\0\3\u01c5"+
    "\71\0\1\u01c8\63\0\1\u01c9\14\0\2\u01c5\1\u01c6\1\0"+
    "\1\u01c7\1\0\5\u01c5\1\0\1\u01c5\1\0\10\u01c5\2\0"+
    "\7\u01c5\1\0\14\u01c5\1\0\3\u01c5\1\u01ca\2\u01c5\1\0"+
    "\1\u01c6\4\u01c5\1\0\3\u01c5\4\u01cb\1\u01cc\53\u01cb\1\u01cd"+
    "\14\u01cb\21\0\1\u01ce\134\0\1\u01cf\73\0\1\u01c9\1\u01cf"+
    "\13\0\4\u01cb\1\u01c5\70\u01cb\4\0\1\u01c5\53\0\1\u01c9"+
    "\14\0\4\u01cb\1\u01c5\54\u01cb\1\u01d0\13\u01cb\22\0\1\u01d1"+
    "\134\0\1\13\12\0\4\u01cb\1\u01c5\55\u01cb\1\u01d2\12\u01cb"+
    "\71\0\1\u01d3\26\0\1\u01d4\145\0\1\u01d5\17\0\1\u01d6"+
    "\110\0\1\u01d7\41\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  1,  9,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  0,  9,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  0,  1,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1, 
     0,  0,  0,  0,  0,  1,  0,  1,  1,  1,  1,  1,  0,  1,  0,  0, 
     1,  0,  0,  1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  0,  0,  1,  0,  1,  0,  1,  1,  1,  0,  1,  0,  1, 
     1,  1,  1,  1,  1,  0,  1,  9,  0,  0,  0,  0,  0,  1,  0,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0, 
     1,  1,  0,  1,  1,  1,  1,  0,  0,  0,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     0,  0,  1,  1,  1,  0,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  0, 
     1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
		// place any extra class members here
		static public SemanticContext context;

		static public Stack<SemanticContext> previousContextStack;
		static public StringInProcess.TokenizedString currentString;
		
		static public String lastToken; 
                
		static public int numCh;
                static public int numWord;
		static public String firstToken;
                static public boolean isTheFirst;
                static public ContextProcessing.PreviousProcess previousProcess;
                static public String wordBag;
                static public String currentWord;
                static public ArrayList<String> headList=new ArrayList<String>();
                static public ArrayList<String> wordList=new ArrayList<String>();
                static public String properNameFlag="";
                static public String articleFlag="";
                static public String prepositionFlag="";
                static public Data.Verbs verbsFlag=new Data.Verbs();
                static public boolean fin=false;
                static public DataStructures.WordBag wbag=new DataStructures.WordBag();
                static public DataStructures.BagData root=null;
                static public DataStructures.WordBag wordinbag=new DataStructures.WordBag();



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
                
  public Lexer(String in){
         
		numCh=1;
                numWord=1;
		previousContextStack = new Stack<SemanticContext>();

		context=new GeneralContext(null);
                StringInProcess.TokenizedString currentString=new StringInProcess.TokenizedString();

		previousContextStack.add(context);
		lastToken="";
		firstToken="";
                wordBag="";
                isTheFirst=true;
                previousProcess=PreviousProcess.EMPTY;
    this.yy_reader = new StringReader(in);
  }
  public Lexer(java.io.Reader in) {
  		// place any extra initialisation code here
                  
		numCh=1;
                numWord=1;
		previousContextStack = new Stack<SemanticContext>();

		context=new GeneralContext(null);
                StringInProcess.TokenizedString currentString=new StringInProcess.TokenizedString();

		previousContextStack.add(context);
		lastToken="";
		firstToken="";
                wordBag="";
                isTheFirst=true;
                previousProcess=PreviousProcess.EMPTY;
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[27572];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    try{
System.out.println("he terminado");
wbag.restart();


}catch (Exception e){;}
fin=true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 354: 
          { Output.write(yytext()); }
        case 472: break;
        case 100: 
          { Output.write(yytext()); }
        case 473: break;
        case 9: 
          { try{ System.out.println("la bolsa en el salto ");Lexer.wbag.escribir();

              if (Lexer.lastToken==""){
                  System.out.println("lallalllallla-saltodos");
              if (Lexer.wbag.tam()>0) {
                BagData ultimo=Lexer.wbag.get(Lexer.wbag.tam()-1);
                  ultimo.string+=yytext();
                  if (ultimo.string.contains("\n")) System.out.println("lo contiene");
                  System.out.println("lallalllallla-saltodos"+ultimo.string+"qqq");
                
              }else{
               Output.write(new RoleTreeNode(yytext()));
                    Lexer.context.changeContext(ContextualList.INITIAL, Lexer.context," ", " ");
              }
            }
              else {
                  System.out.println("la salto de "+Lexer.wbag.tam());
                  Lexer.wbag.put(new SaltoBagData(yytext(),TypesTerms.FT,Lexer.numCh-Lexer.lastToken.length(),Lexer.numWord-1,Lexer.numCh-1,new InfoFound(),Lexer.context.getContext()));
              }
              Lexer.isTheFirst=true;numCh+=1;
 System.out.println("SALTOOOOO_por_aqui");
 Lexer.isTheFirst=true;char salto[]={'\n'};
 System.out.println("Que estoy escribiendo"+yytext()+"estoy porque");
 
 numCh+=1;Lexer.context.changeContext(ContextualList.INITIAL, Lexer.context," ", " ");

}catch(Exception e){;} }
        case 474: break;
        case 29: 
          { try{ System.out.println("la bolsa en el salto ");Lexer.wbag.escribir();
Lexer.verbsFlag=null;
              if (Lexer.lastToken!=""){
                  System.out.println("lallalllallla-saltouno");
              if (Lexer.wbag.tam()>0) {
                  System.out.println("la bolsa es por aqui"); Lexer.wbag.escribir();
                  Lexer.wbag.restart();
                    Output.write(new RoleTreeNode(Lexer.lastToken));
                    Lexer.lastToken="";
              }
              else  {
                  Output.write(new RoleTreeNode(Lexer.lastToken));
                  Lexer.lastToken="";
              }}
              else {
                  System.out.println("la salto de "+Lexer.wbag.tam());
                  Lexer.wbag.restart();
              }
              System.out.println("SALTOOOOO_por_aqui");Lexer.isTheFirst=true;char salto[]={'\n'};Output.write(new RoleTreeNode(yytext()));numCh+=1;Lexer.context.changeContext(ContextualList.INITIAL, Lexer.context," ", " ");}catch(Exception e){;} }
        case 475: break;
        case 470: 
          {  System.out.println("he reconocido porla gracia"); 
if (wbag.wbag.size()>0) wbag.put(new DataStructures.AddBagData(yytext(),TypesTerms.FT,numCh,numWord,numCh+21, new Recognition.InfoFound(),Lexer.context.getContext()));  numWord=numWord+5;numCh=numCh+21;   }
        case 476: break;
        case 32: 
          {  System.out.println("he entrado por la ulitm llava");Output.write(new RoleTreeNode(yytext()));yybegin(YYINITIAL); }
        case 477: break;
        case 26: 
        case 28: 
        case 30: 
        case 34: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 75: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 146: 
        case 195: 
          { 

String word=yytext();
System.out.println("la entrada es de lowercase"+word);
               currentWord=yytext();
               
                    context=context.checkLowerCaseWord(word);
		
numCh+=yylength();numWord++;
		           }
        case 478: break;
        case 22: 
          { isTheFirst=true; try{
if (Lexer.lastToken!=""){
                  System.out.println("lallalllallla-dospuntos");
              if (Lexer.wbag.tam()>0) {
                  System.out.println("la bolsa es por aqui"); Lexer.wbag.escribir();
                  Lexer.wbag.restart();
                    Output.write(new RoleTreeNode(Lexer.lastToken));
                    Lexer.lastToken="";
              }
              else  {
                  Output.write(new RoleTreeNode(Lexer.lastToken));
                  Lexer.lastToken="";
              }}
              else {
                  System.out.println("la salto de "+Lexer.wbag.tam());
                  Lexer.wbag.restart();
              }

context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext(); System.out.println("he entrado por dos puntos");}catch(Exception e){;}  }
        case 479: break;
        case 33: 
          { isTheFirst=true; try{
if (Lexer.lastToken!=""){
                  System.out.println("lallalllallla-dospuntosdos");
              if (Lexer.wbag.tam()>0) {
                  System.out.println("la bolsa es por aqui"); Lexer.wbag.escribir();
                  Lexer.wbag.restart();
                    Output.write(new RoleTreeNode(Lexer.lastToken));
                    Lexer.lastToken="";
              }
              else  {
                  Output.write(new RoleTreeNode(Lexer.lastToken));
                  Lexer.lastToken="";
              }}
              else {
                  System.out.println("la salto de "+Lexer.wbag.tam());
                  Lexer.wbag.restart();
              }

context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext(); System.out.println("he entrado por dos puntos");}catch(Exception e){;}  }
        case 480: break;
        case 4: 
          { try{Output.write(yytext()); numCh+=yylength();numWord++;}catch(Exception e){;}  }
        case 481: break;
        case 36: 
          { 
String word=yytext();
  String nueva= word.replaceAll("<","");
                nueva= nueva.replaceAll(">","");
                context.checkLowerCaseWord(nueva);
System.out.println("he reconocido la palabra contranscripcion "+yytext());numWord++;numCh+=yylength()-2; }
        case 482: break;
        case 263: 
          { System.out.println("el contexto inicial es"+context.getContext());System.out.println("entro por RMK  "+yytext());isTheFirst=true;Output.write(yytext()); }
        case 483: break;
        case 122: 
        case 123: 
        case 124: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 164: 
        case 165: 
        case 166: 
        case 171: 
        case 172: 
        case 173: 
        case 207: 
        case 213: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 242: 
        case 245: 
        case 247: 
        case 249: 
        case 250: 
        case 251: 
        case 253: 
        case 259: 
        case 260: 
        case 298: 
        case 299: 
        case 332: 
        case 333: 
        case 334: 
        case 343: 
        case 390: 
          { 
System.out.println("he entrado por preposicional");
String newContext=context.prepositionalSyntagmsListProcessing(yytext()).toString();

 }
        case 484: break;
        case 147: 
        case 149: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 168: 
        case 170: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 201: 
        case 221: 
        case 224: 
        case 262: 
        case 274: 
        case 276: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 288: 
        case 289: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 300: 
        case 302: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 312: 
        case 330: 
        case 335: 
        case 350: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 413: 
        case 414: 
        case 415: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 430: 
        case 431: 
        case 432: 
          { 

String newContext=context.wordListProcessing(yytext()).toString();

 }
        case 485: break;
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 269: 
        case 271: 
        case 272: 
        case 273: 
        case 277: 
        case 303: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 381: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 404: 
        case 411: 
        case 418: 
        case 419: 
        case 420: 
        case 422: 
        case 428: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 445: 
        case 446: 
        case 448: 
        case 449: 
          { 

String newContext=context.nounPhraseProcessing(yytext()).toString();

 }
        case 486: break;
        case 6: 
          { try {Output.write(" ");numCh+=1;}catch(Exception e){;} }
        case 487: break;
        case 43: 
          { try{Output.write("\n");numCh+=1;}catch(Exception e){;}; }
        case 488: break;
        case 2: 
        case 19: 
        case 23: 
          { System.out.println("llll"+yytext()); }
        case 489: break;
        case 3: 
        case 7: 
        case 11: 
        case 24: 
        case 35: 
        case 37: 
        case 38: 
        case 44: 
        case 45: 
        case 67: 
        case 78: 
        case 83: 
        case 85: 
        case 105: 
        case 121: 
        case 162: 
          { 

String word=yytext();
System.out.println("la entrada es de lowercase"+word);
               currentWord=yytext();
              // currentWord=WordProcessing.WordTransformations.replaceCharacters(word);
                
                    context=context.checkLowerCaseWord(currentWord);
		
numCh+=yylength();numWord++;
		           }
        case 490: break;
        case 25: 
          { try{context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext();}catch(Exception e){;}  }
        case 491: break;
        case 5: 
          { try{context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext();}catch(Exception e){;}  }
        case 492: break;
        case 465: 
          { ; }
        case 493: break;
        case 21: 
          { ; }
        case 494: break;
        case 20: 
          { ; }
        case 495: break;
        case 10: 
          { ; }
        case 496: break;
        case 98: 
          { ; }
        case 497: break;
        case 101: 
        case 103: 
          { ; }
        case 498: break;
        case 187: 
          { System.out.println ("estoy oir CB"); }
        case 499: break;
        case 17: 
          { System.out.println("he reconocido la llave"); }
        case 500: break;
        case 13: 
          { String word=yytext();
               currentWord=yytext();
                    context=context.checkLowerCaseWord(word);
		
				numCh+=yylength();numWord++; }
        case 501: break;
        case 76: 
        case 110: 
          { System.out.println("he entrado por las truncadas");
                            String word=yytext();
                            currentWord=yytext();
                              String nueva= word.replaceAll("-\n","");
                              
                              nueva=nueva.replaceAll("n~","ñ");
                            System.out.println("he entrado por una minuscula truncada"+word);
                    		  context.checkLowerCaseWord(nueva).toString();
				           
                            numCh+=yylength()-1;numWord++;
				   }
        case 502: break;
        case 79: 
        case 118: 
          { System.out.println("he entrado por las truncadas");
                            String word=yytext();
                            currentWord=yytext();
                              String nueva= word.replaceAll("-\n","");
                              nueva=nueva.replaceAll("n~","ñ");
                            
                    		  context.checkCapitalLettersWord(nueva).toString();
				           
                            numCh+=yylength()-1;numWord++;
				   }
        case 503: break;
        case 49: 
          { 
System.out.println("estoy en el punto");wbag.escribir();Lexer.verbsFlag=null;
isTheFirst=true;firstToken="";context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext(); wordBag=""; }
        case 504: break;
        case 74: 
          { 
System.out.println("estoy en el punto");wbag.escribir();
isTheFirst=true;firstToken="";context.processingPoint(yytext());numCh+=yylength();context=new GeneralContext(); wordBag=""; }
        case 505: break;
        case 40: 
          { 
String word=yytext();
                String nueva= word.replaceAll("<","");
                nueva= nueva.replaceAll(">","");
                context.checkCapitalLettersWord(nueva);
                System.out.println("he reconocido la palabra contranscripcion "+yytext());numWord++;numCh+=yylength()-2; }
        case 506: break;
        case 14: 
          { System.out.println("estoy en el punto");wbag.escribir();Lexer.verbsFlag=null;
try{isTheFirst=true; firstToken=""; context.processingPoint(yytext());numCh+=yylength(); context=new GeneralContext(); wordBag=""; }catch(Exception e){;} }
        case 507: break;
        case 27: 
          { try { System.out.println("he visto un blanco en estado RUB");Output.write(" ");numCh+=1;}catch(Exception e){;} }
        case 508: break;
        case 31: 
          { System.out.println("estoy en el punto");wbag.escribir();
try{isTheFirst=true; firstToken=""; context.processingPoint(yytext());numCh+=yylength(); context=new GeneralContext(); wordBag=""; }catch(Exception e){;} }
        case 509: break;
        case 227: 
          { System.out.println("he entrado por la rubrica");Output.write(new RoleTreeNode(yytext())); yybegin(RUB); }
        case 510: break;
        case 8: 
        case 12: 
        case 15: 
        case 16: 
        case 39: 
        case 41: 
        case 42: 
        case 46: 
        case 47: 
        case 50: 
        case 51: 
        case 52: 
        case 80: 
        case 81: 
        case 82: 
        case 86: 
        case 88: 
        case 119: 
        case 126: 
        case 167: 
          { System.out.println("he entrado por las mayuascuy");String word=yytext();
                    		  
currentWord=yytext();System.out.println("estoy en el contexto de "+context.getContext());
context.checkCapitalLettersWord(word).toString();
				           
                            numCh+=yylength();numWord++;
				   }
        case 511: break;
        case 18: 
          { System.out.println("la llavae qu"); }
        case 512: break;
        case 48: 
        case 89: 
          { Lexer.wbag.restart();Output.write(new RoleTreeNode(yytext())); }
        case 513: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
